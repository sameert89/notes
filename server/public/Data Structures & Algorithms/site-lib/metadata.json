{"createdTime":1751867621782,"shownInTree":["arrays/bubble-sort.html","arrays/arrays.html","arrays/selection-sort.html","graphs/shortest-path-problem.html","graphs/topological-sort.html","graphs/representation-of-graphs.html","graphs/strongly-connected-components.html","graphs/minimum-spanning-trees-(mst).html","graphs/problems.html","graphs/graphs.html","graphs/disjoint-set-union(dsu).html","graphs/cycle-detection.html","graphs/depth-first-search-(dfs).html","graphs/breadth-first-search-(bfs).html","heaps/heaps.html","leetcode-contests/leetcode-contests.html","leetcode-contests/weekly/359/maximize-profit-as-a-salesman.html","leetcode-contests/weekly/359/find-the-longest-equal-subarray.html","miscellaneous/miscellaneous.html","miscellaneous/policy-based-data-structures.html","miscellaneous/mathematical-induction.html","miscellaneous/resources/04-greedy.pdf","miscellaneous/resources/04-greedy.html","miscellaneous/resources/roadmap-resources.pdf","miscellaneous/resources/roadmap-resources.html","miscellaneous/galen's-guide-to-being-a-successful-competitive-programmer.html","miscellaneous/complexity-theory-(p,-np,-np-hard-and-np-complete).html","problems/problems.html","problems/leetcode/path-sum-3.html","problems/leetcode/miscellaneous.html","problems/leetcode/divisor-game.html","problems/leetcode/is-graph-bipartite.html","problems/leetcode/nth-digit.html","problems/leetcode/leetcode.html","problems/leetcode/440-kth-lexicographically-smallest-number.html","problems/gfg/gfg.html","problems/gfg/alien-dictionary.html","problems/gfg/flood-fill-algorithm.html","queues/queues.html","stacks/stacks.html","strings/strings.html","strings/kmp-algorithm.html","trees/trees.html","trees/red-and-black-trees.html","trees/range-queries.html","trees/avl-trees.html","tries/tries.html","tries/problems.html","index.html"],"attachments":["miscellaneous/resources/04-greedy.pdf","miscellaneous/resources/roadmap-resources.pdf","site-lib/html/custom-head-content-content.html","site-lib/scripts/graph-wasm.wasm","site-lib/fonts/94f2f163d4b698242fef.otf","site-lib/fonts/72505e6a122c6acd5471.woff2","site-lib/fonts/2d5198822ab091ce4305.woff2","site-lib/fonts/c8ba52b05a9ef10f4758.woff2","site-lib/fonts/cb10ffd7684cd9836a05.woff2","site-lib/fonts/b5f0f109bc88052d4000.woff2","site-lib/fonts/cbe0ae49c52c920fd563.woff2","site-lib/fonts/535a6cf662596b3bd6a6.woff2","site-lib/fonts/70cc7ff27245e82ad414.ttf","site-lib/fonts/454577c22304619db035.ttf","site-lib/fonts/52ac8f3034507f1d9e53.ttf","site-lib/fonts/05b618077343fbbd92b7.ttf","site-lib/fonts/4bb6ac751d1c5478ff3a.woff2","site-lib/media/6155340132a851f6089e.svg","site-lib/media/2308ab1944a6bfa5c5b8.svg","site-lib/html/file-tree-content.html","site-lib/scripts/webpage.js","site-lib/scripts/graph-wasm.js","site-lib/scripts/graph-render-worker.js","site-lib/media/favicon.png","site-lib/styles/snippets.css","site-lib/styles/obsidian.css","site-lib/styles/other-plugins.css","site-lib/styles/theme.css","site-lib/styles/global-variable-styles.css","site-lib/styles/supported-plugins.css","site-lib/styles/main-styles.css","_excalidraw/drawing-2023-09-13-15.28.51.excalidraw.md","_excalidraw/drawing-2023-10-01-22.04.16.excalidraw.md","_excalidraw/drawing-2023-10-01-22.21.21.excalidraw.md","_excalidraw/drawing-2023-10-01-22.28.13.excalidraw.md","_excalidraw/drawing-2023-10-01-23.12.08.excalidraw.md","_excalidraw/drawing-2023-08-31-21.48.45.excalidraw.md","_assets/pasted-image-20230924234109.png","_assets/pasted-image-20230917195830.png","_excalidraw/drawing-2023-09-17-20.42.18.excalidraw.md","_excalidraw/drawing-2023-08-20-14.07.38.excalidraw.md","_excalidraw/drawing-2023-08-20-14.18.38.excalidraw.md","_excalidraw/drawing-2023-09-04-16.48.47.excalidraw.md","_excalidraw/drawing-2023-09-04-16.52.05.excalidraw.md","_excalidraw/drawing-2023-08-26-13.15.15.excalidraw.md","_excalidraw/drawing-2023-08-26-16.50.59.excalidraw.md","_excalidraw/drawing-2023-08-26-21.55.35.excalidraw.md","_assets/pasted-image-20230821102028.png","_assets/pasted-image-20230821102417.png","_assets/example1-1.webp","_assets/example2-1.webp","_excalidraw/drawing-2023-08-29-11.13.50.excalidraw.md","_excalidraw/drawing-2023-08-29-11.23.21.excalidraw.md","_excalidraw/drawing-2023-08-21-09.39.36.excalidraw.md","_assets/pasted-image-20230821095302.png","_assets/pasted-image-20230821095820.png","_excalidraw/drawing-2023-08-21-10.01.13.excalidraw.md","_assets/pasted-image-20230821101105.png","_excalidraw/drawing-2023-08-27-14.11.51.excalidraw.md","_excalidraw/drawing-2023-08-29-13.29.34.excalidraw.md","_excalidraw/drawing-2023-08-29-18.39.55.excalidraw.md","_excalidraw/drawing-2023-08-26-01.48.03.excalidraw.md","_excalidraw/drawing-2023-08-25-14.07.54.excalidraw.md","site-lib/rss.xml","site-lib/fonts/mathjax_zero.woff","site-lib/fonts/mathjax_main-regular.woff","site-lib/fonts/mathjax_main-bold.woff","site-lib/fonts/mathjax_math-italic.woff","site-lib/fonts/mathjax_main-italic.woff","site-lib/fonts/mathjax_math-bolditalic.woff","site-lib/fonts/mathjax_size1-regular.woff","site-lib/fonts/mathjax_size2-regular.woff","site-lib/fonts/mathjax_size3-regular.woff","site-lib/fonts/mathjax_size4-regular.woff","site-lib/fonts/mathjax_ams-regular.woff","site-lib/fonts/mathjax_calligraphic-regular.woff","site-lib/fonts/mathjax_calligraphic-bold.woff","site-lib/fonts/mathjax_fraktur-regular.woff","site-lib/fonts/mathjax_fraktur-bold.woff","site-lib/fonts/mathjax_sansserif-regular.woff","site-lib/fonts/mathjax_sansserif-bold.woff","site-lib/fonts/mathjax_sansserif-italic.woff","site-lib/fonts/mathjax_script-regular.woff","site-lib/fonts/mathjax_typewriter-regular.woff","site-lib/fonts/mathjax_vector-regular.woff","site-lib/fonts/mathjax_vector-bold.woff"],"allFiles":["index.html","trees/trees.html","strings/strings.html","problems/leetcode/leetcode.html","problems/gfg/gfg.html","problems/problems.html","miscellaneous/miscellaneous.html","leetcode-contests/leetcode-contests.html","arrays/arrays.html","tries/tries.html","trees/range-queries.html","trees/avl-trees.html","stacks/stacks.html","queues/queues.html","problems/leetcode/path-sum-3.html","problems/leetcode/nth-digit.html","problems/leetcode/miscellaneous.html","problems/leetcode/is-graph-bipartite.html","problems/leetcode/divisor-game.html","problems/leetcode/440-kth-lexicographically-smallest-number.html","problems/gfg/flood-fill-algorithm.html","miscellaneous/policy-based-data-structures.html","miscellaneous/mathematical-induction.html","miscellaneous/galen's-guide-to-being-a-successful-competitive-programmer.html","miscellaneous/complexity-theory-(p,-np,-np-hard-and-np-complete).html","leetcode-contests/weekly/359/maximize-profit-as-a-salesman.html","leetcode-contests/weekly/359/find-the-longest-equal-subarray.html","heaps/heaps.html","graphs/topological-sort.html","graphs/shortest-path-problem.html","graphs/representation-of-graphs.html","graphs/problems.html","graphs/minimum-spanning-trees-(mst).html","graphs/graphs.html","graphs/disjoint-set-union(dsu).html","graphs/depth-first-search-(dfs).html","graphs/cycle-detection.html","graphs/breadth-first-search-(bfs).html","arrays/bubble-sort.html","arrays/selection-sort.html","strings/kmp-algorithm.html","problems/gfg/alien-dictionary.html","trees/red-and-black-trees.html","tries/problems.html","miscellaneous/resources/roadmap-resources.pdf","miscellaneous/resources/roadmap-resources.html","miscellaneous/resources/04-greedy.pdf","miscellaneous/resources/04-greedy.html","graphs/strongly-connected-components.html","site-lib/html/custom-head-content-content.html","site-lib/scripts/graph-wasm.wasm","site-lib/fonts/94f2f163d4b698242fef.otf","site-lib/fonts/72505e6a122c6acd5471.woff2","site-lib/fonts/2d5198822ab091ce4305.woff2","site-lib/fonts/c8ba52b05a9ef10f4758.woff2","site-lib/fonts/cb10ffd7684cd9836a05.woff2","site-lib/fonts/b5f0f109bc88052d4000.woff2","site-lib/fonts/cbe0ae49c52c920fd563.woff2","site-lib/fonts/535a6cf662596b3bd6a6.woff2","site-lib/fonts/70cc7ff27245e82ad414.ttf","site-lib/fonts/454577c22304619db035.ttf","site-lib/fonts/52ac8f3034507f1d9e53.ttf","site-lib/fonts/05b618077343fbbd92b7.ttf","site-lib/fonts/4bb6ac751d1c5478ff3a.woff2","site-lib/media/6155340132a851f6089e.svg","site-lib/media/2308ab1944a6bfa5c5b8.svg","site-lib/fonts/mathjax_zero.woff","site-lib/fonts/mathjax_main-regular.woff","site-lib/fonts/mathjax_main-bold.woff","site-lib/fonts/mathjax_math-italic.woff","site-lib/fonts/mathjax_main-italic.woff","site-lib/fonts/mathjax_math-bolditalic.woff","site-lib/fonts/mathjax_size1-regular.woff","site-lib/fonts/mathjax_size2-regular.woff","site-lib/fonts/mathjax_size3-regular.woff","site-lib/fonts/mathjax_size4-regular.woff","site-lib/fonts/mathjax_ams-regular.woff","site-lib/fonts/mathjax_calligraphic-regular.woff","site-lib/fonts/mathjax_calligraphic-bold.woff","site-lib/fonts/mathjax_fraktur-regular.woff","site-lib/fonts/mathjax_fraktur-bold.woff","site-lib/fonts/mathjax_sansserif-regular.woff","site-lib/fonts/mathjax_sansserif-bold.woff","site-lib/fonts/mathjax_sansserif-italic.woff","site-lib/fonts/mathjax_script-regular.woff","site-lib/fonts/mathjax_typewriter-regular.woff","site-lib/fonts/mathjax_vector-regular.woff","site-lib/fonts/mathjax_vector-bold.woff","site-lib/html/file-tree-content.html","site-lib/scripts/webpage.js","site-lib/scripts/graph-wasm.js","site-lib/scripts/graph-render-worker.js","site-lib/media/favicon.png","site-lib/styles/snippets.css","site-lib/styles/obsidian.css","site-lib/styles/other-plugins.css","site-lib/styles/theme.css","site-lib/styles/global-variable-styles.css","site-lib/styles/supported-plugins.css","site-lib/styles/main-styles.css"],"webpages":{"arrays/arrays.html":{"title":"Arrays","icon":"","description":"\n<a class=\"internal-link\" data-href=\"Arrays/Bubble Sort.md\" href=\"arrays/bubble-sort.html#_0\" target=\"_self\" rel=\"noopener nofollow\">Bubble Sort</a>\n<br><a class=\"internal-link\" data-href=\"Arrays/Selection Sort.md\" href=\"arrays/selection-sort.html#_0\" target=\"_self\" rel=\"noopener nofollow\">Selection Sort</a>\n","aliases":[],"inlineTags":[],"frontmatterTags":["#MOCs"],"headers":[],"links":["arrays/bubble-sort.html#_0","arrays/selection-sort.html#_0"],"author":"","coverImageURL":"","fullURL":"arrays/arrays.html","pathToRoot":"..","attachments":[],"createdTime":1751483694106,"modifiedTime":1751483694106,"sourceSize":46,"sourcePath":"Arrays/Arrays.md","exportPath":"arrays/arrays.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"arrays/bubble-sort.html":{"title":"Bubble Sort","icon":"","description":"<a href=\".?query=tag:algorithms\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#algorithms\">#algorithms</a> <a href=\".?query=tag:sorting\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#sorting\">#sorting</a> Intuition\nI start by taking the first element, I compare it with immediate next element, if its larger I swap them. I go till the end. I again start from the first element, I keep compare-swapping it to its neighbours until end-1 this time\ndef bubble_sort(arr): for end in range(len(arr) - 1, 0, -1): for i in range(0, end): if arr[i] &gt; arr[i+1]: arr[i], arr[i+1] = arr[i+1], arr[i] ","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Implementation","level":2,"id":"Implementation_0"}],"links":["?query=tag:algorithms","?query=tag:sorting"],"author":"","coverImageURL":"","fullURL":"arrays/bubble-sort.html","pathToRoot":"..","attachments":[],"createdTime":1750880933672,"modifiedTime":1750881385359,"sourceSize":466,"sourcePath":"Arrays/Bubble Sort.md","exportPath":"arrays/bubble-sort.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"arrays/selection-sort.html":{"title":"Selection Sort","icon":"","description":"<a href=\".?query=tag:algorithms\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#algorithms\">#algorithms</a> <a href=\".?query=tag:sorting\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#sorting\">#sorting</a> Intuition\nI pick up an element, I find out if its the smallest, then exchange it with the first element, now I look up in the rest of the array excluding the first element, if it is smallest I exchange it with position 2\nusing System.Collections.Generic;\npublic static void SelectionSort(List&lt;int&gt; collection)\n{ if (collection.Count == 0) return; for (int i = 0; i &lt; collection.Count - 1; i++) { int currentMinPos = i; for (int j = i + 1; j &lt; collection.Count; j++) { if (collection[j] &lt; collection[currentMinPos]) { currentMinPos = j; } } // Swap if needed if (currentMinPos != i) { int temp = collection[i]; collection[i] = collection[currentMinPos]; collection[currentMinPos] = temp; } }\n}\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Implementation","level":2,"id":"Implementation_0"}],"links":["?query=tag:algorithms","?query=tag:sorting"],"author":"","coverImageURL":"","fullURL":"arrays/selection-sort.html","pathToRoot":"..","attachments":[],"createdTime":1750879576584,"modifiedTime":1750880925443,"sourceSize":813,"sourcePath":"Arrays/Selection Sort.md","exportPath":"arrays/selection-sort.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"graphs/breadth-first-search-(bfs).html":{"title":"Breadth First Search (BFS)","icon":"","description":"This is another kind of graph traversal, in this traversal all the neighbors of a vertex are visited at once before moving on to their neighbors.\nIt uses queue data structure to achieve this order.\nIt is one of the most important algorithms in graphs, in my experience even more so than DFS. It follows a minimum order. Means it can be used to find shortest distance between nodes.\nIt is the same as lever order traversal of trees.\nTime complexity of BFS: O(V) space complexity O(V)Below is the implementation of the iterative version of BFS.def bfs(adj, vertex, vis): q = deque() q.append(vertex) vis.add(vertex) while q: node = q.popleft() for neighbor in adj[node]: if neighbor not in vis: vis.add(neighbor) q.append(neighbor)\nvoid bfs(unordered_map&lt;int, vector&lt;int&gt;&gt; &amp;adj, int vertex, unordered_set&lt;int&gt;&amp; vis){ queue&lt;int&gt; q; q.push(vertex); vis.insert(vertex); while(!q.empty()){ int node = q.front(); q.pop(); for(auto const &amp;neighbor: adj[node]){ if(!vis.count(neighbor)){ q.push(neighbor); vis.insert(neighbor); } } }\n}\n# Snippet created by sameer 21-08-2023\ndef valid_neighbors(x, y, graph): m, n = len(graph), len(graph[0]) delta = [(-1,0),(0,-1),(0,1),(1,0)] neighbors = [] for dx,dy in delta: r, c = x + dx, y + dy if 0&lt;=r&lt;m and 0&lt;=c&lt;n: neighbors.append((r,c)) return neighbors\ndef bfs_impl(matrix, vertex, vis): vis.add(vertex) q = deque() q.append(vertex) while q: x, y = q.popleft() for r, c in valid_neighbors(x, y, matrix): if (r, c) not in vis: q.append((r, c)) vis.add((r, c)) vector&lt;pair&lt;int, int&gt;&gt; valid_neighbors(int x, int y, vector&lt;vector&lt;int&gt;&gt; &amp;graph){ vector&lt;pair&lt;int, int&gt;&gt; neighbors, delta{{{0,-1}, {-1, 0}, {0, 1}, {1, 0}}}; int m = graph.size(), n = graph[0].size(); for(auto const &amp;[dx, dy]: delta){ int r = x + dx, c = y + dy; if(r &gt;=0 and r &lt; m and c &gt;= 0 and c &lt; n) neighbors.push_back({r,c}); } return neighbors;\n}\nvoid BFS(vector&lt;vector&lt;int&gt;&gt; &amp;matrix, int vertex, vector&lt;vector&lt;bool&gt;&gt; vis)\nThis is also one of the most frequent topics in the graph theory. It is a variation of implicit BFS In this algorithm we take more than one sources and the BFS progresses simultaneously for those source vertices.\nBelow Diagram shows the thing visuallyDrawing 2023-08-25 14.07.54.excalidrawThe template below is for multi source BFS.\n<a data-href=\"level order traversal\" href=\".html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">level order traversal</a> of binary trees without the null methoddef bfs_multi(matrix, vis): q = deque() m, n = len(matrix), len(matrix[0]) for r in range(m): for c in range(n): if matrix[r][c] == 1: q.append((r, c)) vis.add((r, c)) while q: sz = len(q) # This part is closely related to level wise traversal of trees while sz: sz -= 1 x, y = q.popleft() for r, c in valid_neighbors(x, y, matrix): if (r, c) not in vis: vis.add((r, c)) q.append((r, c))\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"BFS","level":4,"id":"BFS_0"},{"heading":"implicit BFS","level":4,"id":"implicit_BFS_0"},{"heading":"Multi Source BFS","level":3,"id":"Multi_Source_BFS_0"}],"links":[".html"],"author":"","coverImageURL":"","fullURL":"graphs/breadth-first-search-(bfs).html","pathToRoot":"..","attachments":["_excalidraw/drawing-2023-08-25-14.07.54.excalidraw.md"],"createdTime":1750879262832,"modifiedTime":1751482405232,"sourceSize":3615,"sourcePath":"Graphs/Breadth First Search (BFS).md","exportPath":"graphs/breadth-first-search-(bfs).html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"graphs/cycle-detection.html":{"title":"Cycle Detection","icon":"","description":"Read <a data-href=\"Graphs\" href=\"graphs/graphs.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Graphs</a> to know more about cycles. Below are the variants of this problem.<br>Cycle detection in undirected graphs follows one simple logic you get a free pass if you are my parent. Means when I am revisiting the vertex I have visited earlier, I can only continue if it is my parent or halt. Be it <a data-href=\"Breadth First Search (BFS)\" href=\"graphs/breadth-first-search-(bfs).html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Breadth First Search (BFS)</a> or <a data-href=\"Depth First Search (DFS)\" href=\"graphs/depth-first-search-(dfs).html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Depth First Search (DFS)</a> in both of the algorithms you have to keep track of the parent of the current node.Below is the code snippet which is self-explanatory.\nNote: You will have to run the code for each connected component with a loop if it's not visited.def undir_cycle_bfs(adj, vertex, vis): parent = {vertex: -1} q = deque() q.append(vertex) vis.add(vertex) while q: curr = q.popleft() for nbr in adj[curr]: if nbr not in vis: vis.add(nbr) parent[nbr] = curr q.append(nbr) elif nbr != parent[curr]: return True # cycle is present return False\nNote: do not get confused by why we are setting the parent of the source node as -1. Because it's visited first so we have to do all operations there itself and as long as the vertexes are positive, it works always even for self edges dry run.bool undir_cycle_bfs(vector&lt;vector&lt;int&gt;&gt; &amp;adj, int vertex, unordered_set&lt;int&gt; &amp;vis){ unordered_map&lt;int, int&gt; parent({vertex, -1}); queue&lt;int&gt; q; q.append(vertex); vis.insert(vertex); while(!q.empty()){ int curr = q.pop(); for(auto const &amp;nbr: adj[curr]){ if(vis.count(nbr) == 0){ vis.insert(nbr); parent[nbr] = curr; q.push(nbr); } else if (nbr != parent[curr]): return true; } } return false;\n}\nThe approach is similar again, here also we keep track of the parent vertex for each vertex.\nBefore the call starts in the driver you have to manually set the parent of source to -1.def undir_cycle_dfs(adj, vertex, vis, parent): vis.add(vertex) for nbr in adj[vertex]: if nbr not in vis: parent[nbr] = vertex if undir_cycle_dfs(adj, nbr, vis, parent): return True elif nbr != parent[vertex]: return True return False\nbool undir_cycle_dfs(vector&lt;vector&lt;int&gt;&gt; &amp;adj, unordered_set&lt;int&gt; &amp;vis, unordered_map&lt;int, int&gt; &amp;parent){ vis.insert(vertex); for(auto const &amp;nbr: adj[vertex]){ if(vis.count(nbr) == 0){ parent[nbr] = vertex; if(undir_cycle_dfs(adj, nbr, vis, parent)) return true; } else if(nbr != parent[vertex]) return true; } return false;\n}\nSo our parent logic will fail here, see the below diagramabsBFS failing: In this case if we start from the vertex s BFS will first visit a and b then when is the turn of a, a sees that b is already visited but it is not my parent so a call will return true. But infact there is no cycle here.\nDFS failing: In this case if we start from the vertex s DFS will first visit a, then visit b from a's call. Then returns. Then continues in the adj of s for the next branch. It sees that b is already visited but it is not the parent of curr vertex s so it returns true, but infact there is no cycle in this graph.<br>This can be done using the property of <a data-href=\"Topological Sort\" href=\"graphs/topological-sort.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Topological Sort</a>. Which is that a valid toposort can only be found for a directed acyclic graph.\nSo try to find the toposort of the graph and if the number of vertices in toposort &lt; number vertices in the graph =&gt; cycle is present.\nBelow is the implementation given for the Kahn toposort.def kahn_toposort(adj): V = len(adj) # finding the indegrees indegrees = [0]*V for vertex in range(V): for nbr in adj[vertex]: indegrees[nbr] += 1 q = deque() toposort = [] for v, indegree in enumerate(indegrees): if indegree == 0: q.append(v) # kind of like a multi source bfs while q: curr = q.popleft() toposort.append(curr) for nbr in adj[curr]: indegrees[nbr] -= 1 if indegrees[nbr] == 0: q.append(nbr) return toposort\ndef check_cycle(adj): return len(adj) == len(kahn_toposort(adj))\nIt can be done using DFS alone without the use of topological sorting. First of all we need to understand the nature of the cycles in Directed Graphs.Let's assume we are doing a DFS traversal of a directed graph. We can say that there is a cycle in the graph if we visit a node that has already been visited in the current depth line.\nSee the diagram below-Drawing 2023-08-26 01.48.03.excalidraw\nSuppose the orange depth line is visited first by the DFS, it goes till vertex 3. Then stops, the blue depth line goes all the way and meets the x again which is the part of the blue depth line. But see the tangent, where the DFS tries to go to the 3 which is already visited but it is not the part of the blue depth line and if its not the part of the current line there is no cycle even if we see a visited node.So cycle detection becomes the trivial task of keeping track of overall visited nodes and the nodes seen in the current depth line.\nKeep a separate set to track the nodes in current depth line.def dir_cycle_dfs(adj, curr_depth_line, vertex, vis): vis.add(vertex) curr_depth_line.add(vertex) for nbr in adj[vertex]: if nbr not in vis: if dir_cycle_dfs(adj, curr_depth_line, nbr, vis): return True elif nbr in curr_depth_line: return True curr_depth_line.remove(vertex) # this node &amp; the nodes ahead of it in its depth line have been visited so it is not needed return False\nbool dir_cycle_dfs(vector&lt;vector&lt;int&gt;&gt; &amp;adj, unordered_set&lt;int&gt; &amp;curr_depth_line, int vertex, unordered_set&lt;int&gt; &amp;vis){ vis.insert(vertex); curr_depth_line.insert(vertex); for(auto const &amp;nbr: adj){ if(vis.count(nbr) == 0){ if(dir_cycle_dfs(adj, curr_depth_line, nbr, vis)) return true; } else if(curr_depth_line.count(nbr)) return true; } curr_depth_line.erase(nbr); return false;\n}\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Cycle detection in Undirected graphs","level":1,"id":"Cycle_detection_in_Undirected_graphs_0"},{"heading":"Using BFS","level":3,"id":"Using_BFS_0"},{"heading":"Using DFS","level":3,"id":"Using_DFS_0"},{"heading":"Cycle detection in directed graphs","level":2,"id":"Cycle_detection_in_directed_graphs_0"},{"heading":"Using Toposort (BFS/DFS)","level":3,"id":"Using_Toposort_(BFS/DFS)_0"},{"heading":"Using DFS alone","level":3,"id":"Using_DFS_alone_0"}],"links":["graphs/graphs.html#_0","graphs/breadth-first-search-(bfs).html#_0","graphs/depth-first-search-(dfs).html#_0","graphs/topological-sort.html#_0"],"author":"","coverImageURL":"","fullURL":"graphs/cycle-detection.html","pathToRoot":"..","attachments":["_excalidraw/drawing-2023-08-26-01.48.03.excalidraw.md"],"createdTime":1750879262832,"modifiedTime":1751482405889,"sourceSize":6343,"sourcePath":"Graphs/Cycle Detection.md","exportPath":"graphs/cycle-detection.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"graphs/depth-first-search-(dfs).html":{"title":"Depth First Search (DFS)","icon":"","description":"This is a traversal technique of graphs, which goes depth-wise. It will go from a node to one of its neighbors and then go into one of the neighbors' neighbors and then backtracks when it cant go deeper.It utilizes stack for the order of nodes. The recursive implementation is the most common as it is way shorter than both BFSes and the iterative DFS.\nTime and Space Complexity: O(V) each node is visited only once and the recursion stack takes space for each step.# Snippet created by sameer 21-08-2023\ndef dfs(adj, vertex, vis): vis.add(vertex) for neighbor in adj[vertex]: if not vis[neighbor]: dfs(adj, neighbor, vis)\n// Snippet created by sameer 21-08-2023\nvoid dfs(const unordered_map&lt;int, vector&lt;int&gt;&gt;&amp; adj, int vertex, unordered_set&lt;int&gt;&amp; vis) { vis.insert(vertex); for (int neighbor : adj[vertex]) { if (vis.find(neighbor) == vis.end()) { dfs(adj, neighbor, vis); } }\n}\n# Snippet created by sameer 21-08-2023\ndef valid_neighbors(x, y, graph): m, n = len(graph), len(graph[0]) delta = [(-1,0),(0,-1),(0,1),(1,0)] neighbors = [] for dx,dy in delta: r, c = x + dx, y + dy if 0&lt;=r&lt;m and 0&lt;=c&lt;n: neighbors.append((r,c)) return neighbors\ndef dfs_impl(matrix, vertex, vis): x, y = vertex vis.add(vertex) for r, c in valid_neighbors(x, y, matrix): if (r, c) not in vis: dfs_impl(matrix, (r, c), vis)\n// Snippet created by sameer 21-08-2023\nvector&lt;pair&lt;int, int&gt;&gt; valid_neighbors(int x, int y, vector&lt;vector&lt;int&gt;&gt; &amp;graph){ vector&lt;pair&lt;int, int&gt;&gt; neighbors, delta{{{0,-1}, {-1, 0}, {0, 1}, {1, 0}}}; int m = graph.size(), n = graph[0].size(); for(auto const &amp;[dx, dy]: delta){ int r = x + dx, c = y + dy; if(r &gt;=0 and r &lt; m and c &gt;= 0 and c &lt; n) neighbors.push_back({r,c}); } return neighbors;\n}\nvoid dfs_impl(vector&lt;vector&lt;int&gt;&gt; &amp;matrix, pair&lt;int, int&gt; vertex, vector&lt;vector&lt;int&gt;&gt; vis){ auto [x, y] = vertex; vis[x][y] = true; for(auto [r, c]: valid_neighbors(x, y, matrix)){ if(!vis[r][c]) dfs_impl(matrix, {r, c}, vis); }\n}\ndef dfs_iter(adj, vertex, vis): stack = [] stack.append(vertex) vis.add(vertex) while stack: node = stack.pop() for neighbor in adj[node]: if neighbor not in vis: vis.add(neighbor) stack.append(neighbor)\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"DFS","level":4,"id":"DFS_0"},{"heading":"Implicit DFS","level":4,"id":"Implicit_DFS_0"},{"heading":"Iterative DFS","level":4,"id":"Iterative_DFS_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"graphs/depth-first-search-(dfs).html","pathToRoot":"..","attachments":[],"createdTime":1750879262833,"modifiedTime":1751482406198,"sourceSize":2638,"sourcePath":"Graphs/Depth First Search (DFS).md","exportPath":"graphs/depth-first-search-(dfs).html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"graphs/disjoint-set-union(dsu).html":{"title":"Disjoint Set Union(DSU)","icon":"","description":"A special data structure that is used to tell whether a vertex v belongs to a connected component or not. Traditionally you would use DFS or BFS to traverse the component and try to find v, but Disjoint sets can do this in O(1) time with respect to the DS.Time Complexity: Ackermann's FunctionA disjoint set data structure had 2 methods union &amp; find. Union merges a vertex to the connected component of another vertex and does nothing if they belonged to the same component. Find tells the ultimate parent of the the nodes, if they are same they belong to the same component.\nDrawing 2023-08-29 13.29.34.excalidraw<img class=\"emoji is-unresolved\" draggable=\"false\" alt=\"⚠\" src=\"https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/26a0.svg\" height=\"14px\" target=\"_self\" style=\"max-width: 100%;\"> Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. <img class=\"emoji is-unresolved\" draggable=\"false\" alt=\"⚠\" src=\"https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/26a0.svg\" height=\"14px\" target=\"_self\" style=\"max-width: 100%;\">before merge After merge Take a look at the above graph, instead of joining the elements to their immediate parent in union operation, we do it to an ultimate parent of the whole component, the find function does the job of finding this ultimate parent.\nUnion by rank: We calculate the union by a rank, the node with higher rank is assigned as the parent.\nUnion by size: We calculate union by the number of nodes in a component. The vertex with larger component is assigned as the parent.\nWhat is rank?\nRank is the estimate of the depth of the tree. Union by rank is an optimization technique of the union operation, in which we try to reduce the depth of the tree by merging the nodes according to rank.class DSU: parent = None rank = None def __init__(self, n): self.parent = [i for i in range(n)] self.rank = [0] * n def union(self, u, v): u, v = self.find(u), self.find(v) # find the ultimate parents if u != v: if self.rank[u] &gt;= self.rank[v]: self.parent[v] = u else: self.parent[u] = v self.rank[u] += self.rank[v] == self.rank[u] # increases only when an equivalent forest is added, like the 2048 game. return True # do not belong to the same component, union did happen return False # belong to the same component and union did not happen def find(self, v): if self.parent[v] == v: return v self.parent[v] = self.find(self.parent[v]) # path compression happens here return self.parent[v]\nclass DSU { vector&lt;int&gt; parent, rank; DSU(int n){ parent.resize(n); iota(parent.begin(), parent.end(), 0); rank.resize(n); } int find(int u){ if(parent[u] == u) return u; return parent[u] = find(parent[u]); } bool union(int u, int v){ int u_root = find(u), v_root = find(v); if(u_root != v_root){ if(rank[u_root] &gt;= rank[v_root]) parent[v_root] = u_root; else parent[u_root] = v_root; rank[u_root] += rank[u_root] == rank[v_roo]; return true; } return false; }\n};\nWhy does rank only increase when the ranks are same?\nDrawing 2023-08-29 18.39.55.excalidraw\nReason for attaching smaller to larger and not reverse. Because we do not want to increase the height of the tree which which increase our lookup time.Why path compression?\nIt is another optimization technique that is used to speed up the disjoint set. It effectively reduces the height of the tree to an at max 2 in log(N) time complexity.class DSU: parent = None size = None def __init__(self, n): self.parent = [i for i in range(n)] self.size = [1]*n def union(self, u, v): u_root, v_root = self.find(u), self.find(v) if u_root != v_root: if self.size[u_root] &gt;= self.size[v_root]: self.size[u_root] += self.size[v_root] self.parent[v_root] = u_root else: self.size[v_root] += self.size[u_root] self.parent[u_root] = v_root return True return False def find(self, u): if self.parent[u] == u: return u self.parent[u] = self.find(self.parent[u]) return self.parent[u]\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"What is a disjoint set data structure?","level":4,"id":"What_is_a_disjoint_set_data_structure?_0"},{"heading":"Union Find","level":4,"id":"Union_Find_0"},{"heading":"Text Elements","level":1,"id":"Text_Elements_0"},{"heading":"Path Compression","level":4,"id":"Path_Compression_0"},{"heading":"Types of Union","level":4,"id":"Types_of_Union_0"},{"heading":"Union By Rank","level":2,"id":"Union_By_Rank_0"},{"heading":"Union by Size","level":2,"id":"Union_by_Size_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"graphs/disjoint-set-union(dsu).html","pathToRoot":"..","attachments":["_excalidraw/drawing-2023-08-29-13.29.34.excalidraw.md","_excalidraw/drawing-2023-08-29-18.39.55.excalidraw.md"],"createdTime":1750879262833,"modifiedTime":1751482406682,"sourceSize":4195,"sourcePath":"Graphs/Disjoint Set Union(DSU).md","exportPath":"graphs/disjoint-set-union(dsu).html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"graphs/graphs.html":{"title":"Graphs","icon":"","description":"Graphs are data structures made up of vertices and edges. Below is a simple undirected graph with some vertices and edges connecting them.Drawing 2023-08-21 09.39.36.excalidraw<img class=\"emoji is-unresolved\" draggable=\"false\" alt=\"⚠\" src=\"https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/26a0.svg\" height=\"14px\" target=\"_self\" style=\"max-width: 100%;\"> Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. <img class=\"emoji is-unresolved\" draggable=\"false\" alt=\"⚠\" src=\"https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/26a0.svg\" height=\"14px\" target=\"_self\" style=\"max-width: 100%;\">Some real life applications of graphs: Google Maps\nSocial networking sites to map the user data and build connections between users\nCircuit Design, the electrical elements can be treated as nodes and the electrical connections as edges.\n<br>HTML and React DOM which are an <a data-href=\"N-ary\" href=\".html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">N-ary</a> tree or graphs.\nPaint Bucket Tool\nPacket switching in CCN.\nSequence of nodes from one node to another passing through edges.<br><img alt=\"Pasted image 20230821095302.png\" src=\"_assets/pasted-image-20230821095302.png\" target=\"_self\">A closed path is when the initial node is same as the final node. A closed path means there is a cycle.A cycle is a closed path in which no two nodes are repeating except the first and the last node.<br><img alt=\"Pasted image 20230821095820.png\" src=\"_assets/pasted-image-20230821095820.png\" target=\"_self\">In a connected component there is a path between every 2 nodes or simply that there are no isolated nodes.\nA graph may comprise more that one connected componentsDrawing 2023-08-21 10.01.13.excalidrawThis is the infamous mesh topology. Every node is connected to every other node.<br>The edges are not directional. The nodes appear on each other's <a data-href=\"adjacency lists\" href=\".html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">adjacency lists</a>. The edges are directional, we say \"There is an edge from node A to node B\".The edges have some weights associated with them.This type of graph does not contain cycles.Bipartite graph is a special type of graph whose vertices can be divided into 2 independent sets U and V such that every node in U has an edge connecting to a node in V.\nDefinition on color: Start with 2 colors and keep painting nodes with alternating colors, no two connected ones should have same color, if you can do that with just 2 colors, your graph is bipartite.<br><img alt=\"Pasted image 20230821101105.png\" src=\"_assets/pasted-image-20230821101105.png\" target=\"_self\">A sparse graph is a graph in which there are not many edges between the nodes, In such types of graphs the adj matrix representation wastes a lot of space.\nA dense graph is a graph in which there are large number of edges between the nodes. The adj matrix is suitable here, because of less number of zeros.<br>Dense graph&nbsp;is a graph in which the number of edges is close to the maximal number of edges.&nbsp;Sparse graph&nbsp;is a graph in which the number of edges is close to the minimal number of edges.&nbsp;Sparse graph&nbsp;can be a&nbsp;<a data-tooltip-position=\"top\" aria-label=\"http://mathworld.wolfram.com/DisconnectedGraph.html\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"http://mathworld.wolfram.com/DisconnectedGraph.html\" target=\"_self\"><em></em></a>disconnected graph.In a graph, the maximal number of edges refers to the total number of edges that a graph can have if all possible edges between distinct vertices are present. This value depends on the number of vertices in the graph. For an undirected graph with V vertices, the maximal number of edges is given by the formula:Maximal Edges = V * (V - 1) / 2The minimal number of edges in a graph depends on its structure. For an undirected graph, the minimal number of edges occurs in the case of a disconnected graph. In a disconnected graph, the graph is composed of two or more separate components that have no edges between them. The minimal number of edges in such a graph would be 0, as there are no connections between the components.There are two types of degrees in a directed graph, if there is an edge coming toward a vertex then it counts as indegree 1 for that node. Similarly there is outdegree.A cut is a partition of a graph vertices into two disjoint subsets.\nA&nbsp;cut&nbsp;C&nbsp;= (S,T)&nbsp;is a partition of&nbsp;V&nbsp;of a graph&nbsp;G&nbsp;= (V,E)&nbsp;into two subsets&nbsp;S&nbsp;and&nbsp;T. The&nbsp;cut-set&nbsp;of a cut&nbsp;C&nbsp;= (S,T)&nbsp;is the set&nbsp;{(u,v) ∈&nbsp;E&nbsp;|&nbsp;u&nbsp;∈&nbsp;S,&nbsp;v&nbsp;∈&nbsp;T} i.e. both the pair has one node in S and the other node of the pair in T.Minimum &amp; Maximum Cut: Minimum possible cut in the graph(cuts least amount of edges), maximum is maximum possible cut (cuts largest number of Edges)Drawing 2023-08-27 14.11.51.excalidraw","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Text Elements","level":1,"id":"Text_Elements_0"},{"heading":"Conventions and terminology","level":2,"id":"Conventions_and_terminology_0"},{"heading":"Path","level":3,"id":"Path_0"},{"heading":"Cycle","level":3,"id":"Cycle_0"},{"heading":"Connected components","level":3,"id":"Connected_components_0"},{"heading":"Complete Graph","level":3,"id":"Complete_Graph_0"},{"heading":"Undirected Graph","level":3,"id":"Undirected_Graph_0"},{"heading":"Directed Graphs (Digraphs)","level":3,"id":"Directed_Graphs_(Digraphs)_0"},{"heading":"Weighted Graph","level":3,"id":"Weighted_Graph_0"},{"heading":"Acyclic Graph","level":3,"id":"Acyclic_Graph_0"},{"heading":"Bipartite Graph","level":3,"id":"Bipartite_Graph_0"},{"heading":"Sparse &amp; Dense Graph","level":3,"id":"Sparse_&_Dense_Graph_0"},{"heading":"Degree of a node","level":3,"id":"Degree_of_a_node_0"},{"heading":"Cut","level":3,"id":"Cut_0"}],"links":[".html",".html"],"author":"","coverImageURL":"","fullURL":"graphs/graphs.html","pathToRoot":"..","attachments":["_excalidraw/drawing-2023-08-21-09.39.36.excalidraw.md","_assets/pasted-image-20230821095302.png","_assets/pasted-image-20230821095820.png","_excalidraw/drawing-2023-08-21-10.01.13.excalidraw.md","_assets/pasted-image-20230821101105.png","_excalidraw/drawing-2023-08-27-14.11.51.excalidraw.md"],"createdTime":1750879262834,"modifiedTime":1751482407382,"sourceSize":4206,"sourcePath":"Graphs/Graphs.md","exportPath":"graphs/graphs.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"graphs/minimum-spanning-trees-(mst).html":{"title":"Minimum Spanning Trees (MST)","icon":"","description":"What is a spanning tree?For an connected &amp; undirected graph, a spanning tree is a subgraph of the graph that is also a tree and connects all nodes together.For a graph with V vertices, a spanning tree will have exactly V - 1 edges.Minimum Spanning Tree: It is defined for a weighted undirected graph &amp; is a spanning tree which has the minimum possible weights of the edges. So if there are 2 edges from node u to v then the edge with smaller weight will be chosen to keep them connected.There are various algorithms for finding the Minimum Spanning Trees.Cuz its a tree, it can't have cycles duh!Properties of MST\nIf each edge weight is unique then there can be only one MST.\nFor every cycle in the graph, the edge with the largest weight in the cycle, cannot belong to any MST.\nFor a Cut C of a <a data-href=\"Graphs\" href=\"graphs/graphs.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Graphs</a> any edge E that belongs to the cut set of C that has the least weight out of all the edges of the cut set, belongs to all the edges of the cut set.\n<br><img alt=\"example1-1.webp\" src=\"_assets/example1-1.webp\" target=\"_self\" style=\"width: 500px; max-width: 100%;\"><img alt=\"example2-1.webp\" src=\"_assets/example2-1.webp\" target=\"_self\" style=\"width: 500px; max-width: 100%;\">\nThere are various algorithms for finding the minimum spanning trees.<br><a href=\".?query=tag:greedy\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#greedy\">#greedy</a> Intuition Behind the Prim's Algorithm:\nThe cut property of MST is the intuition behind the algorithm. Consider the below graph:\nDrawing 2023-08-29 11.13.50.excalidrawIt is a valid cut because it breaks the graph into two disjoint set of vertices. There are 2 edges in the cut-set of this cut. Edge with weight 1 and the edge with weight 5. Now according to the cut property, 1 has to be the part of the MST, we are not sure about 5, maybe its a part maybe its not. But we got one surity to we push that into the MST. We keep doing this for all the nodes and get the edges that are sure. When all the vertices are checked then we have the final MST.\nIn the case of this graph, below are the steps:\nDrawing 2023-08-29 11.23.21.excalidraw\nIn the above steps, the edge with weight 5 is the only one that was not confirmed to be a part of the MST, so it is not the part of the MST.So the algorithm is making cuts, keeping the track of the cut-set and choosing the minimum every time. We utilize a priority queue for this task. vis means the node has become the part of the MST.\nTime Complexity: Elog(E)\nSpace Complexity: O(E)def prims_mst(adj): V = len(adj) vis = set() mst = [] # contains the edges u,v that are part of the MST pq = [(0, 0, -1)] # (weight, node, parent) mst_wt = 0 while pq: wt, curr, par = heapq.heappop(pq) if curr not in vis: # PITFALL, pq may have already visited nodes because we have to revisit nodes like above diagram, more than once to make sure that they get 0 tick marks for nbr, w in adj[curr]: heapq.heappush(pq, (w, nbr, curr)) # not adding the nbr to visited here vis.add(curr) # because of the PITFALL we have to keep it here. if par != -1: mst_wt += wt mst.append((par, curr)) return (mst_wt, mst)\nstruct Edge { int weight; int node; int parent; Edge(int w, int n, int p) : weight(w), node(n), parent(p) {} bool operator&gt;(const Edge&amp; other) const { return weight &gt; other.weight; }\n}; typedef vector&lt;vector&lt;pair&lt;int, int&gt;&gt;&gt; AdjList; // List of (node, weight) pairs pair&lt;int, vector&lt;pair&lt;int, int&gt;&gt;&gt; primsMST(const AdjList&amp; adj) { int V = adj.size(); set&lt;int&gt; vis; vector&lt;pair&lt;int, int&gt;&gt; mst; // contains the edges (u, v) that are part of the MST priority_queue&lt;Edge, vector&lt;Edge&gt;, greater&lt;Edge&gt;&gt; pq; int mst_wt = 0; pq.push(Edge(0, 0, -1)); while (!pq.empty()) { Edge e = pq.top(); pq.pop(); if (vis.find(e.node) == vis.end()) { for (const auto&amp; neighbor : adj[e.node]) { pq.push(Edge(neighbor.second, neighbor.first, e.node)); } vis.insert(e.node); if (e.parent != -1) { mst_wt += e.weight; mst.push_back(make_pair(e.parent, e.node)); } } } return make_pair(mst_wt, mst);\n}\n<br>This is where we introduce the concept of <a data-href=\"Disjoint Set Union(DSU)\" href=\"graphs/disjoint-set-union(dsu).html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Disjoint Set Union(DSU)</a> to you, go ahead and read that and come back &amp; this algorithm will be a breeze.Intuition behind Kruskal's Algorithm\nThis is much more intuitive, because unlike prims algorithm you do not need to know any properties. So let us ask ourselves what is the MST?\nTree with V vertices and V - 1 edges that has the minimum weight. Every edge is crucial in the MST and we do not need extra edges that serve no purpose.There it is, we take the smallest weight edges one by one and do a union of those, if the nodes of the edge already belong to the same component means that there is already a minimum path that lighter edge have made between the two nodes in discussion, so we do not need this extra edge.<br>Now that you have done that <img class=\"emoji is-unresolved\" draggable=\"false\" alt=\"😊\" src=\"https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f60a.svg\" height=\"14px\" target=\"_self\" style=\"max-width: 100%;\"> let's move too the Kruskal's algorithm.# import DSU class here\ndef kruskals_mst(adj): V = len(adj) ds = DSU(V) # initialize the Disjoint Set mst, mst_wt = [], 0 # Constucting a sorted edge list pq = [] vis = set() for i in range(V): for nbr, wt in adj[i]: if (nbr, i) not in vis: pq.append((wt, i, nbr)) vis.add((i, nbr)) heapq.heapify(pq) # you can also just reverse sort and use pop # perform union find to get MST while pq: w, u, v = heapq.heappop(pq) if ds.find(u) != ds.find(v): ds.union(u, v) mst_wt += w mst.append((u, v)) if len(mst) == V - 1: break return (mst_wt, mst)\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Prim's Algorithm (MST)","level":2,"id":"Prim's_Algorithm_(MST)_0"},{"heading":"Kruskal's Algorithm for MST","level":2,"id":"Kruskal's_Algorithm_for_MST_0"}],"links":["graphs/graphs.html#_0","?query=tag:greedy","graphs/disjoint-set-union(dsu).html#_0"],"author":"","coverImageURL":"","fullURL":"graphs/minimum-spanning-trees-(mst).html","pathToRoot":"..","attachments":["_assets/example1-1.webp","_assets/example2-1.webp","_excalidraw/drawing-2023-08-29-11.13.50.excalidraw.md","_excalidraw/drawing-2023-08-29-11.23.21.excalidraw.md"],"createdTime":1750879262834,"modifiedTime":1751482407873,"sourceSize":5730,"sourcePath":"Graphs/Minimum Spanning Trees (MST).md","exportPath":"graphs/minimum-spanning-trees-(mst).html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"graphs/problems.html":{"title":"Problems","icon":"","description":"<a data-href=\"Flood fill algorithm\" href=\"problems/gfg/flood-fill-algorithm.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Flood fill algorithm</a><br>\n<a data-href=\"Is Graph Bipartite\" href=\"problems/leetcode/is-graph-bipartite.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Is Graph Bipartite</a><br>\n<a data-href=\"Alien Dictionary\" href=\"problems/gfg/alien-dictionary.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Alien Dictionary</a>","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":["problems/gfg/flood-fill-algorithm.html#_0","problems/leetcode/is-graph-bipartite.html#_0","problems/gfg/alien-dictionary.html#_0"],"author":"","coverImageURL":"","fullURL":"graphs/problems.html","pathToRoot":"..","attachments":[],"createdTime":1750879262835,"modifiedTime":1751482407943,"sourceSize":68,"sourcePath":"Graphs/Problems.md","exportPath":"graphs/problems.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"graphs/representation-of-graphs.html":{"title":"Representation of Graphs","icon":"","description":"Representation of graphs is done in a number of waysOne way of representing a graph with V vertices is using a V*V matrix. Whenever there is an edge between two vertices u and v then Adj[u][v] != 0. The rest stuff is zero where there are no edges. It can represent all types of graphs weighted unweighted, cyclic etc. Demerit: Wastage of space because when there is no edge but still we are consuming memory to store the zero.<img alt=\"Pasted image 20230821102028.png\" src=\"_assets/pasted-image-20230821102028.png\" target=\"_self\">This is the most commonly used and most efficient one to represent graphs. We make a map of the vertex to a list that has all the nodes such that there exists an edge between u and .<br><img alt=\"Pasted image 20230821102417.png\" src=\"_assets/pasted-image-20230821102417.png\" target=\"_self\">To represent a weighted graph we can just use a pair/tuple of (node/weight) in the list.Below are the code snippets.template &lt;typename Container&gt;\nunordered_map&lt;int, vector&lt;int&gt;&gt; build_graph(const Container &amp;edges, bool directed = false)\n{ unordered_map&lt;int, vector&lt;int&gt;&gt; adj; for (const auto &amp;edge : edges) { int u, v; if constexpr (std::is_same_v&lt;Container, vector&lt;vector&lt;int&gt;&gt;&gt;) { u = edge[0]; v = edge[1]; } else if constexpr (std::is_same_v&lt;Container, vector&lt;pair&lt;int, int&gt;&gt;&gt;) { u = edge.first; v = edge.second; } adj[u].push_back(v); if (!directed) adj[v].push_back(u); } return adj;\n}\ndef build_graph(edges, directed): adj = defaultdict(list) weighted = len(edges[0]) == 3 for edge in edges: if weighted: u,v,w = edge adj[u].append(v, w) if not directed: adj[v].append(u, w) else: u,v = edge adj[u].append(v) if not directed: adj[v].append(u) return adj\nNote: The python code works for weighted graphs too.This is one more way of representing graphs, basically it is a list of tuples where each tuple represents an edge between u and v or from u to v in case of directed graphs. some times there are weights associated too.In this form the graph is implied. A lot of problems are formed using this method. You are given a matrix which has some zeroes and ones, you need to do DFS or BFS on them. The neighbors of the cell are 4 connected or 8 connected. generally 4 connected you need to find the neighbors of the cells and then apply traversal. Below is the snippet for the valid neighbors.vector&lt;pair&lt;int, int&gt;&gt; valid_neighbors(int x, int y, vector&lt;vector&lt;int&gt;&gt; &amp;graph){ vector&lt;pair&lt;int, int&gt;&gt; neighbors, delta{{{0,-1}, {-1, 0}, {0, 1}, {1, 0}}}; int m = graph.size(), n = graph[0].size(); for(auto const &amp;[dx, dy]: delta){ int r = x + dx, c = y + dy; if(r &gt;=0 and r &lt; m and c &gt;= 0 and c &lt; n) neighbors.push_back({r,c}); } return neighbors;\n}\ndef valid_neighbors(x, y, graph): m, n = len(graph), len(graph[0]) delta = [(-1,0),(0,-1),(0,1),(1,0)] neighbors = [] for dx,dy in delta: r, c = x + dx, y + dy if 0&lt;=r&lt;m and 0&lt;=c&lt;n: neighbors.append((r,c)) return neighbors\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Adjacency Matrix","level":1,"id":"Adjacency_Matrix_0"},{"heading":"Adjacency List","level":1,"id":"Adjacency_List_0"},{"heading":"Building Adjacency List From edge-list","level":3,"id":"Building_Adjacency_List_From_edge-list_0"},{"heading":"build graph","level":4,"id":"build_graph_0"},{"heading":"Edge list","level":1,"id":"Edge_list_0"},{"heading":"Implicit Graph","level":1,"id":"Implicit_Graph_0"},{"heading":"valid neighbors","level":4,"id":"valid_neighbors_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"graphs/representation-of-graphs.html","pathToRoot":"..","attachments":["_assets/pasted-image-20230821102028.png","_assets/pasted-image-20230821102417.png"],"createdTime":1750879262835,"modifiedTime":1751482408241,"sourceSize":3414,"sourcePath":"Graphs/Representation of Graphs.md","exportPath":"graphs/representation-of-graphs.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"graphs/shortest-path-problem.html":{"title":"Shortest Path Problem","icon":"","description":"Another important domain in graph theory is the ability to find the shortest distance between a source vertex &amp; a destination vertex. There are a lot of path finding algorithms. Each one of them has their merits and demerits.<a href=\".?query=tag:greedy\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#greedy\">#greedy</a> <a href=\".?query=tag:bfs\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#bfs\">#bfs</a>\nFinds the shortest path from source node to all other nodes.\nDirected/undirected graph does not matter.\nDoes not work when the graphs have negative edges/negative weight cycles (more on this below #7).\nCan use set/heap to reduce the time taken and number of calls than using a queue.\nTime Complexity: O(ElogV) for adj list using heap. O(V^2) for adjacency matrix. In case you used queue instead of min heap, it jumps to O(V*E) due to suboptimal calls.\nSpace Complexity: O(V)\nIt is again a variation of BFS, instead of using a visited array we rely on the logic that when we try to revisit an already visited thing (The main purpose of having the visited array in the first place). If we have a positive weight the distance is never going to decrease so we are not going to repush stuff into the queue. This is why Dijkstra's algorithm fails for negative loop cycles because it keeps revolving at the loop. If there are no negative cycles but a negative edge, like for a directed graph it still can produce incorrect answers due to negative edges and have unnecessary extra calls.\nDrawing 2023-08-26 13.15.15.excalidraw<br><img class=\"emoji is-unresolved\" draggable=\"false\" alt=\"⚠\" src=\"https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/26a0.svg\" height=\"14px\" target=\"_self\" style=\"max-width: 100%;\"> Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. <img class=\"emoji is-unresolved\" draggable=\"false\" alt=\"⚠\" src=\"https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/26a0.svg\" height=\"14px\" target=\"_self\" style=\"max-width: 100%;\">8 8 s 0 0 even though s is in adj of d we cannot repush it\ninto the graph because 8 + 8 is not less than 0 d I do not like writing algorithms, I think the algorithms are best defined by the code. So here is the code for the Dijkstra's algorithm.def dijkstra(adj, S): q = [(0, S)] heapq.heapify(q) dist = [float('inf') for _ in range(V)] dist[S] = 0 while q: distance, curr = heapq.heappop(q) for nbr, wt in adj[curr]: if distance + wt &lt; dist[nbr]: dist[nbr] = distance + wt # distance and dist[curr] are the same thing and they represent current shortest known path to curr heapq.heappush(q, (dist[nbr], nbr)) # Push the updated distance to the queue when you see a new known shortest path return [i if i != float('inf') else -1 for i in dist]\nvector&lt;int&gt; dijkstra(vector&lt;vector&lt;int&gt;&gt; &amp;adj, int S){ int V = adj.size(); priority_queue&lt;pair&lt;int, int&gt;, vector&lt;pair&lt;int, int&gt;&gt;, greater&lt;pair&lt;int, int&gt;&gt; pq; pq.push({0, S}); vector&lt;int&gt; dist(V, INT_MAX); dist[S] = 0; while(!q.empty()){ auto [distance, curr] = pq.front(); pq.pop(); for(auto nbr_wt: adj[curr]){ int nbr = nbr_wt[0], wt = nbr_wt[1]; if(distance + wt &lt; dist[nbr]){ dist[nbr] = distance + wt; pq.push({dist[nbr], nbr}); } } } return distance; // Make sure to replace INT_MAX if asked in the problem\n}\nYou may also require to print or fetch the actual shortest path, instead of the distances. This can also be done using Dijkstra's algorithm. Store the previous elements to each element in a prev array and then traverse it to find the distances.def dijkstra_path(adj, S): V = len(adj) q = [(0, S)] heapq.heapify(q) dist = [float('inf')]*V; dist[S] = 0 prev = [-1]*V while q: distance, curr = heapq.heappop(q) for nbr, wt in adj[curr]: if distance + wt &lt; dist[nbr]: dist[nbr] = distance + wt prev[nbr] = curr heapq.heappush(q, (dist[nbr], nbr)) return (dist, prev)\nNow suppose you need to find the shortest path from vertex 0 to vertex 6. So first push 6 into a stack, then go to prev[6] and push it into the stack and then go to prev of this prev, do this until you reach source.<br><a href=\".?query=tag:dp\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#dp\">#dp</a> <a href=\".?query=tag:bfs\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#bfs\">#bfs</a>\nThis is another path finding algorithm, this however works in case of negative edges unlike Dijkstra. In case of negative cycles too, this can be used to find the presence of such cycles. Source to all nodes.\nCan be applied on any graph, be it directed or undirected. Undirected weighted graph can be treated like a directed graph, with 2 arrows with same weight coming into and going out from the nodes.\nTime Complexity: O(V*E)\nSpace Complexity: O(E)\nThe time complexity is worse than Dijkstra.Note: There is no notion of shortest path in case of negative cycles, cause if you start from a node and come back to the same node and your net cost is smaller then you will keep on revolving on the cycle. So we only detect the presence of such cycles.How does it work?\nFor a graph with V vertices, you need to relax each edge V - 1 times.\nThe Bellman Ford Algorithm just estimates the distances of all nodes from the source node and then updates the distances as more and more shorter ways are discovered.In first iteration, the immediate neighbors of the source are relaxed. In second iteration neighbors of these neighbors are relaxed, In BFS in this step the previous neighbors have been kicked out of the queue, but Bellman ford does it for all the nodes thereby ensuring a shortest path.\nWhy V - 1 iterations. For any graph with V vertices, you need at most V-1 traversals through all edges to relax them into shortest distances. Due to fixed amount of iterations, we do not need to worry about infinite cycles.Detecting Negative Weight Cycles\nAfter you are done calculating the loop V - 1 times, rerun the loop again, if the distances still reduce for atleast one vertex, that means there is a negative cycle present.Why V - 1 iterations?\nThat seems like such a random number like tennis scoreboards. But it is not consider a graph with v vertices. Lets take the source node s. Let me ask you this, what is the maximum number of ways that can come out of this source to visit all other nodes? It is V - 1 see the diagram below.Drawing 2023-08-26 16.50.59.excalidraw\nSince you are going through every edge V - 1 times, it is guaranteed that from any node to any other node (at max V - 1 things can come out) the edges will be covered in the loops.def bellman_ford(adj, S, check_neg): V = len(adj) dist = [float('inf')]*V dist[S] = 0 for i in range(V-1): # traversing each edge for vertex, nbrs in enumerate(adj): for nbr, wt in nbrs: # relaxing the edges if needed if dist[vertex] + wt &lt; dist[nbr]: dist[nbr] = dist[vertex] + wt neg_cycles = False if check_neg: for vertex, nbrs in enumerate(adj): for nbr, wt in nbrs: if dist[vertex] + wt &lt; dist[nbr]: neg_cycles = True break return (dist, neg_cycles) if check_neg else dist\npair&lt;vector&lt;int&gt;, bool&gt; bellman_ford(vector&lt;vector&lt;int&gt;&gt; &amp;adj, int S){ int V = adj.size(); bool neg_cycles = false; vector&lt;int&gt; dist(V, INT_MAX); dist[S] = 0; for(int i = 0; i &lt; V; i++){ // Traversing the edges for(int u = 0; u &lt; V; u++){ for(auto const &amp;[v, w]: adj[u]){ // Relaxing the edges if(dist[u] + w &lt; dist[v]){ dist[v] = dist[u] + w; if i == V: neg_cycles = true; } } } } return make_pair(dist, neg_cycles);\n} This only works for unweighted graphs. We assume the weights to be 1.\nUsed for source to single destination.\nWhy do we even use this? This is slightly faster than the Dijkstra's algorithm for this particular graph.\nTime Complexity: O(V + E)\nSpace Complexity: O(V)\n<br>This is used in problems where you need to fetch the actual shortest path between two nodes. <a data-href=\"Snakes &amp; Ladders\" href=\".html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Snakes &amp; Ladders</a>def BFS(adj, src, dest, v, pred, dist): # a queue to maintain queue of vertices whose # adjacency list is to be scanned as per normal # DFS algorithm queue = [] # boolean array visited[] which stores the # information whether ith vertex is reached # at least once in the Breadth first search visited = [False for i in range(v)]; # initially all vertices are unvisited # so v[i] for all i is false # and as no path is yet constructed # dist[i] for all i set to infinity for i in range(v): dist[i] = 1000000 pred[i] = -1; # now source is first to be visited and # distance from source to itself should be 0 visited[src] = True; dist[src] = 0; queue.append(src); # standard BFS algorithm while (len(queue) != 0): u = queue[0]; queue.pop(0); for i in range(len(adj[u])): if (visited[adj[u][i]] == False): visited[adj[u][i]] = True; dist[adj[u][i]] = dist[u] + 1; pred[adj[u][i]] = u; queue.append(adj[u][i]); # We stop BFS when we find # destination. if (adj[u][i] == dest): return True; return False;\nI have no clue why this exists and is important. <br><a href=\".?query=tag:dp\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#dp\">#dp</a>\nThis is a multi source shortest path finding algorithm. From every node to every other node.\nWorks for negative edges and cycles as well.\nTime Complexity: O()\nSpace Complexity: O()\nHow does it work:\nRequire adjacency matrix for implementing this algorithm.\nYou go from every node to . You either go through directly or try to go through some other intermediate node . Now it is not guaranteed that you will reach the destination (may have distance). You keep doing this for all nodes over and over. Choose each node as intermediate node and for each iteration, try to go directly to the node A to B and try to go from that chosen intermediate node. And minimize the distance\nA[i][j] = min(A[i][j], A[i][x] + A[x][j])\nOnce you are done with choosing all the nodes as intermediate node, the final matrix will give you shortest distance from every node to every other node.\ndef floyd_warshall(adj, check_neg): V = len(adj) cost_matrix = [[i if i != -1 else float('inf') for i in row] for row in adj] for x in range(V): for i in range(V): for j in range(V): cost_matrix[i][j] = min(cost_matrix[i][j], cost_matrix[i][x] + cost_matrix[x][j]) neg_cycle = False if check_neg: for i in range(V): if cost_matrix[i][i] &lt; 0: neg_cycle = True break return cost_matrix if not check_neg else (cost_matrix, neg_cycle)\n<br>Silly little goose <img class=\"emoji is-unresolved\" draggable=\"false\" alt=\"🦆\" src=\"https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f986.svg\" height=\"14px\" target=\"_self\" style=\"max-width: 100%;\"> tip about python. When you pass a list to a function, you are essentially passing a reference to the list object (since everything is a object in python). You can modify the contents and it will reflect in the original object, but once you reassign the thing, you are reassigning the pointer to a new object. IT IS NOT GOING TO REFLECT IN THE ORIGINAL OBJECT, THE LINK IS JUST LOST.pair&lt;vector&lt;vector&lt;int&gt;&gt;, bool&gt; floyd_warshall(vector&lt;vector&lt;int&gt;&gt; adj, bool check_neg){ int V = adj.size(); vector&lt;vector&lt;int&gt;&gt; cost_matrix(adj); for(int i = 0; i &lt; V; i++){ for(int j = 0; j &lt; V; j++) if(adj[i][j] == -1) cost_matrix[i][j] = INT_MAX; } for(int x = 0; x &lt; V; x++){ for(int i = 0; i &lt; V; i++){ for(int j = 0; j &lt; V; j++){ if(cost_matrix[i][x] != INT_MAX and cost_matrix[x][j] != INT_MAX){ cost_matrix[i][j] = min(cost_matrix[i][j], cost_matrix[i][x] + cost_matrix[x][j]); } } } } neg_cycle = false; for(int i = 0; i &lt; V; i++){ if(cost_matrix[i][i] &lt; 0){ neg_cycle = 0; break; } } return make_pair(cost_matrix, neg_cycle);\n}\nThis is an extension of Dijkstra's algorithm It is used in many real world applications.\nDijkstra is a greedy algorithm so it can only looks for the current visible shortest path. This can still not be fastest since in cases there may be an overall shortest route which may appear to be far at first. A* introduces a heuristic which tells the algorithm that tells the algorithm that it is getting close. So instead of using the greedy distance for ordering the priority queue or the set, we use this heuristic distance. It is an estimated distance however so it cannot be taken into account for actual calculation, it is just for producing a current that propels the algorithm to converge faster.\nDrawing 2023-08-26 21.55.35.excalidraw\nAs you can see in the above diagram, Dijkstra will push the nodes x and y, but the priority queue will put the 3 weighted node first, this will create unnecessary calls. Because we will move on in the path of y and visit the nodes p, q and r, but later on their distances are reupdated from the path of x. If we had an approximate distance called heuristic. We could have introduced a bias in the algorithm for picking better paths. There can be various heuristics like manhatten distance, euclidian distance etc. A* may not produce shortest paths always, it heavily depends on correct modelling of the heuristics.The code will not be provided here, as it is not useful in problem solving on platforms.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Dijkstra's Algorithm","level":2,"id":"Dijkstra's_Algorithm_0"},{"heading":"Text Elements","level":1,"id":"Text_Elements_0"},{"heading":"Printing the shortest path","level":3,"id":"Printing_the_shortest_path_0"},{"heading":"Bellman Ford Algorithm","level":2,"id":"Bellman_Ford_Algorithm_0"},{"heading":"Code","level":4,"id":"Code_0"},{"heading":"Shortest path with BFS","level":2,"id":"Shortest_path_with_BFS_0"},{"heading":"Shortest path using Topological Sort","level":2,"id":"Shortest_path_using_Topological_Sort_0"},{"heading":"Floyd Warshall Algorithm","level":2,"id":"Floyd_Warshall_Algorithm_0"},{"heading":"A* Search Algorithm","level":2,"id":"A*_Search_Algorithm_0"}],"links":["?query=tag:greedy","?query=tag:bfs","?query=tag:dp","?query=tag:bfs",".html","?query=tag:dp"],"author":"","coverImageURL":"","fullURL":"graphs/shortest-path-problem.html","pathToRoot":"..","attachments":["_excalidraw/drawing-2023-08-26-13.15.15.excalidraw.md","_excalidraw/drawing-2023-08-26-16.50.59.excalidraw.md","_excalidraw/drawing-2023-08-26-21.55.35.excalidraw.md"],"createdTime":1750879262835,"modifiedTime":1751482409353,"sourceSize":13613,"sourcePath":"Graphs/Shortest Path Problem.md","exportPath":"graphs/shortest-path-problem.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"graphs/strongly-connected-components.html":{"title":"Strongly Connected Components","icon":"","description":"","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":"","fullURL":"graphs/strongly-connected-components.html","pathToRoot":"..","attachments":[],"createdTime":1750879262835,"modifiedTime":1750879262835,"sourceSize":0,"sourcePath":"Graphs/Strongly Connected Components.md","exportPath":"graphs/strongly-connected-components.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"graphs/topological-sort.html":{"title":"Topological Sort","icon":"","description":"Topological sorting is a specific ordering of the vertices of a graph that ensures that if there is an edge from u to v, then in the toposort u comes before v. This is only possible for Directed Acyclic Graphs.\nThere are various methods to find the topological sorting.This is a famous algorithm, it is a variation of the standard BFS. This algorithm is based on indegrees of the vertices.\nStandard BFS A vertex is popped from the queue only when all its neighbors have been pushed into the queue for visiting.\nKahn's Algorithm A vertex is popped from the queue only when its indegree becomes zero. Means all the nodes that had a directed edge to the current vertex have already been taken care of and put into the toposort. This is the intuition behind the algorithm.def kahn_toposort(adj): V = len(adj) # finding the indegrees indegrees = [0]*V for vertex in range(V): for nbr in adj[vertex]: indegrees[nbr] += 1 q = deque() toposort = [] for v, indegree in enumerate(indegrees): if indegree == 0: q.append(v) # kind of like a multi source bfs while q: curr = q.popleft() toposort.append(curr) for nbr in adj[curr]: indegrees[nbr] -= 1 if indegrees[nbr] == 0: q.append(nbr) return toposort\nvector&lt;int&gt; kahn_toposort(vector&lt;vector&lt;int&gt;&gt; &amp;adj){ int V = adj.size(); vector&lt;int&gt; indegrees(V); for(auto const &amp;vertex: adj){ for(auto const &amp;neighbor: vertex){ indegrees[neighbor]++; } } queue&lt;int&gt; q; vector&lt;int&gt; toposort; for(int vertex = 0; vertex &lt; V; ++vertex){ if(indegrees[vertex] == 0) q.push(vertex); } while(!q.empty()){ int curr = q.front(); q.pop(); toposort.push_back(curr); for(auto const &amp;neighbor: adj[curr]){ indegrees[neighbor]--; if(indegrees[neighbor] == 0) q.push(neighbor); } } return toposort;\n}\nThe topological sort can also be found using DFS. How do you do it? just standard DFS but at the end of each call you just push the node that is done and dusted into the toposort. What we mean by done and dusted is that all the depths ahead of it have been searched meaning all the nodes that appear after it are already pushed into the toposort.\nThe keen eyed among the readers must have guessed that this seems the reverse of toposort. Yes it is reversed. So you have to reverse the list to get the toposort.def dfs_toposort(adj, vertex, vis, toposort): vis.add(vertex) for nbr in adj[vertex]: if nbr not in vis: dfs_toposort(adj, nbr, vis, toposort) toposort.append(vertex)\nvoid dfs_toposort(vector&lt;vector&lt;int&gt;&gt; &amp;adj, int vertex, unordered_set&lt;int&gt; &amp;vis, stack&lt;int&gt; &amp;toposort){ // Notice the Stack vis.insert(vertex); for(auto const &amp;nbr: adj[vertex]){ if(vis.count(nbr) == 0) dfs_toposort(adj, nbr, vis, toposort); } toposort.push(vertex);\n}\nPoints to consider while using DFS for toposort:\nMake sure to reverse the toposort in the driver function.\nMake sure to run the toposort for all connected components as BFS takes care of them because of the indegree calculations, DFS will not.\ndef dfs_toposort(adj, vertex, vis, toposort): vis.add(vertex) for nbr in adj[vertex]: if nbr not in vis: dfs_toposort(adj, nbr, vis, toposort) toposort.append(vertex) class Solution: def topoSort(self, V, adj): toposort = [] vis = set() for i in range(V): if i not in vis: dfs_toposort(adj, i, vis, toposort) return list(reversed(toposort))\ncool point about python: reversed returns an iterator and does not modify the original list. Where as sorted returns the sorted list.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Kahn's Algorithm (Toposort Using BFS)","level":2,"id":"Kahn's_Algorithm_(Toposort_Using_BFS)_0"},{"heading":"Toposort using DFS","level":2,"id":"Toposort_using_DFS_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"graphs/topological-sort.html","pathToRoot":"..","attachments":[],"createdTime":1750879262837,"modifiedTime":1751482448291,"sourceSize":4021,"sourcePath":"Graphs/Topological Sort.md","exportPath":"graphs/topological-sort.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"heaps/heaps.html":{"title":"Heaps","icon":"","description":"Heap is a tree base data structure in which the tree is a complete binary tree. It follows a special heap order property.Complete Binary Tree: A binary tree in which all levels are filled except possibly the last one. The fill order is left to right.\nA complete binary Tree is always a balanced binary tree, but the reverse may not be trueDrawing 2023-09-04 16.48.47.excalidrawHeap order property: For a min heap the every node is smaller than all of its children. For a max heap every node is larger than all of its children.Drawing 2023-09-04 16.52.05.excalidrawAlthough heaps are binary trees, it is more convenient and useful to store them in arrays. It is possible only because it's a complete binary tree.The above min heap can be represented in an array as follows:vector&lt;int&gt; myHeap = {10, 11, 12, 13, 14, 15, 16};\nFor every index i the children of i are present at 2*i + 1 &amp; 2*i + 2. For every child c its parent is at (c-1)//2. Keep it in mind that this is for 0 based indexing. For 1 based indexing the values are 2*i, 2*i + 1, c//2.Insertion operation in a heap can be performed in O(log(N)) time.void heappush(vector&lt;int&gt; &amp;heap, int val) { heap.push_back(val); int N = heap.size(); int childIndex = N - 1, parIndex = (childIndex - 1) / 2; while(heap[parIndex] &gt; heap[childIndex]) { swap(heap[parIndex], heap[childIndex]); childIndex = parIndex; parIndex = (childIndex - 1) / 2; }\n}\nvoid _heappush_max(vector&lt;int&gt; &amp;heap, int val) { heap.push_back(val); int N = heap.size(); int childIndex = N - 1, parIndex = (childIndex - 1) / 2; while(heap[parIndex] &lt; heap[childIndex]) { // This is the only difference. swap(heap[parIndex], heap[childIndex]); childIndex = parIndex; parIndex = (childIndex - 1) / 2; }\n}\nTakes O(log(N)) time.// Program to perform deletion in a heap represented as an array\n#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nauto start = chrono::steady_clock::now();\nint main(){ vector&lt;int&gt; heap = {60, 50, 40, 30, 20}; //!deletion can only be performed at the root ie 60 //=&gt; copy the value of the last node into root node heap.at(0) = heap.at(heap.size()-1); //=&gt; remove the last node heap.erase(heap.end()-1); //=&gt; place the root node into its correct position (TOP to BOTTOM) int parent = 0; int left_child = parent*2 + 1; //for 0 based indexing int right_child = parent*2 + 2; bool complete = false; while(!complete){ int temp = parent; left_child = parent*2 + 1; right_child = parent*2 + 2; if(left_child &lt; heap.size() and heap.at(parent) &lt; heap.at(left_child)){ parent = left_child; } if(right_child &lt; heap.size() and heap.at(parent) &lt; heap.at(right_child)){ parent = right_child; } if(parent == temp){ //swap not done complete = true; } else{ swap(heap.at(parent), heap.at(temp)); } } //print the array for(auto i: heap){ cout &lt;&lt; i &lt;&lt; \" \"; } auto end = chrono::steady_clock::now(); auto diff = end-start; cout &lt;&lt; \"\\nExecution Time: \" &lt;&lt; chrono::duration&lt;double, milli&gt;(diff).count() &lt;&lt; \"ms\"; return 0;\n}\n//* Time and Space Complexities: O(log(n)) and O(1) respectively\nHeapify is converting an array to a valid heap structure.\nTakes O(N) average time.\nHeapify is applied to a single element and it propels it to the right position in the heap. But when talking about heapify in modern programming we often mean building the heap from the array, means heapifying all the nodes that are required (leaf nodes are already heaps).// code for the heapify function with buildHeap\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nvoid heapify(vector&lt;int&gt; &amp;v, int i)\n{ // heap and the position to be heapified int lg = i; // index showing the largest value int left_child = 2 * i + 1; int right_child = 2 * i + 2; // recursive strategy if (left_child &lt; v.size() and v.at(lg) &lt; v.at(left_child)) { lg = left_child; } if (right_child &lt; v.size() and v.at(lg) &lt; v.at(right_child)) { lg = right_child; } if (lg != i) { swap(v.at(lg), v.at(i)); heapify(v, lg); }\n}\n//Function to build heap which calls heapify for each element necessary\nvoid buildHeap(vector&lt;int&gt; &amp;v){ for(int i = v.size()/2 - 1 ; i &gt;= 0 ;i--){ //leaf nodes don't need to be heapified //since they are already heaps heapify(v, i); }\n}\nauto start = chrono::steady_clock::now();\nint main()\n{ vector&lt;int&gt; v = {20, 40, 10, 30, 50}; buildHeap(v); //print the result for(auto i: v){ cout&lt;&lt;i&lt;&lt;\" \"; } auto end = chrono::steady_clock::now(); auto diff = end - start; cout &lt;&lt; \"\\nExecution Time: \" &lt;&lt; chrono::duration&lt;double, milli&gt;(diff).count() &lt;&lt; \"ms\"; return 0;\n}\n//* Time and Space Complexities:\n//* 1) Heapify O(log(n)) and O(1)\n//* 2) build heap O(n)\n//* overall O(nlog(n))\nEfficient sorting algorithm that works in O(Nlog(N)) average complexity and O(1) space.Simple logic, keep moving the first element of the max heap to the end and reheapifying the remaining array.// Heap sort is like insertion sort but instead of linearly finding the min max element\n// it used heap data stucture to fetch the elements\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nvoid heapify(vector&lt;int&gt; &amp;v, int size, int i) // Size because as elements get sorted one by one the pool decreases\n{ // heap and the position to be heapified int lg = i; // index showing the largest value int left_child = 2 * i + 1; int right_child = 2 * i + 2; // recursive strategy if (left_child &lt; size and v.at(lg) &lt; v.at(left_child)) //reverse sort ke liye bas ye less than ko greater than kar sakte hai { lg = left_child; } if (right_child &lt; size and v.at(lg) &lt; v.at(right_child)) { lg = right_child; } if (lg != i) { swap(v.at(lg), v.at(i)); heapify(v, size, lg); }\n}\n// Function to build heap which calls heapify for each element necessary\nvoid buildHeap(vector&lt;int&gt; &amp;v)\n{ for (int i = v.size() / 2 - 1; i &gt;= 0; i--) { // leaf nodes don't need to be heapified // since they are already heaps heapify(v, v.size(), i); }\n}\nvoid heap_sort(vector&lt;int&gt; &amp;v)\n{ // first build heap for the first time buildHeap(v); for (int i = v.size() - 1; i &gt; 0; i--) { // size loop for each iteration the size of unsorted part decreases // 1) get the root which is maximum for maxHeap and swap it to the end swap(v.at(0), v.at(i)); // i = n-1 so we dont need to track the end element i will serve both purpose //2) heapify the one element as it is now out of order, the result of which will be a maxHeap again heapify(v, i, 0); // vector size position }\n}\nauto start = chrono::steady_clock::now();\nint main()\n{ vector&lt;int&gt; v = {-4,0,7,4,9,-5,-1,0,-7,-1}; heap_sort(v); for(auto i: v){ cout&lt;&lt;i&lt;&lt;\" \"; } auto end = chrono::steady_clock::now(); auto diff = end - start; cout &lt;&lt; \"\\nExecution Time: \" &lt;&lt; chrono::duration&lt;double, milli&gt;(diff).count() &lt;&lt; \"ms\"; return 0;\n}\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Representation of Heaps","level":1,"id":"Representation_of_Heaps_0"},{"heading":"Heap Creation (Insertion in Heaps)","level":1,"id":"Heap_Creation_(Insertion_in_Heaps)_0"},{"heading":"Deletion from heap (Root Node Only)","level":1,"id":"Deletion_from_heap_(Root_Node_Only)_0"},{"heading":"Heapify Algorithm","level":1,"id":"Heapify_Algorithm_0"},{"heading":"Heap Sort","level":1,"id":"Heap_Sort_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"heaps/heaps.html","pathToRoot":"..","attachments":["_excalidraw/drawing-2023-09-04-16.48.47.excalidraw.md","_excalidraw/drawing-2023-09-04-16.52.05.excalidraw.md"],"createdTime":1750879262837,"modifiedTime":1751482448837,"sourceSize":7574,"sourcePath":"Heaps/Heaps.md","exportPath":"heaps/heaps.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"leetcode-contests/weekly/359/find-the-longest-equal-subarray.html":{"title":"Find the longest equal subarray","icon":"","description":"<a href=\".?query=tag:sliding_window\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#sliding_window\">#sliding_window</a> <a href=\".?query=tag:hashing\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#hashing\">#hashing</a> <a href=\".?query=tag:arrays\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#arrays\">#arrays</a>Difficulty: Medium-HardYou are given a&nbsp;0-indexed&nbsp;integer array&nbsp;nums&nbsp;and an integer&nbsp;k.A subarray is called&nbsp;equal&nbsp;if all of its elements are equal. Note that the empty subarray is an&nbsp;equal&nbsp;subarray.Return&nbsp;the length of the&nbsp;longest&nbsp;possible equal subarray after deleting&nbsp;at most&nbsp;k&nbsp;elements from&nbsp;nums.A&nbsp;subarray&nbsp;is a contiguous, possibly empty sequence of elements within an array.Example 1:Input: nums = [1,3,2,3,1,3], k = 3\nOutput: 3\nExplanation: It's optimal to delete the elements at index 2 and index 4.\nAfter deleting them, nums becomes equal to [1, 3, 3, 3].\nThe longest equal subarray starts at i = 1 and ends at j = 3 with length equal to 3.\nIt can be proven that no longer equal subarrays can be created.Example 2:Input: nums = [1,1,2,2,1,1], k = 2\nOutput: 4\nExplanation: It's optimal to delete the elements at index 2 and index 3.\nAfter deleting them, nums becomes equal to [1, 1, 1, 1].\nThe array itself is an equal subarray, so the answer is 4.\nIt can be proven that no longer equal subarrays can be created.This problem seemed very easy at first, but was not able to solve it.The approach #1 that came into my mind was using the gap method. I will store the indices of each occurrence of a number and then try to find out if I can bridge the gap between them using k items.Drawing 2023-08-20 14.07.38.excalidrawI would do it for each of the numbers and try to find the maximum of it. What I had trouble thinking is the edge cases that I might get stuck on. If I bridged the gap once, I have to reconsider the possibility of having a longer thing after this that may include some of the nodes from the current elements.This was the logic that the top coders used to solve this problem as well. But they traversed all instances of the element and checked the longest possible thing from them. I did not think of this because I thought it would for sure cause TLE.class Solution: def longestEqualSubarray(self, nums: List[int], k: int) -&gt; int: idx_map = defaultdict(list) max_len = 0 for idx, num in enumerate(nums): idx_map[num].append(idx) print(idx_map) for v in idx_map.values(): end = 0 for i in range(len(v)): while end &lt; len(v) and v[end] - v[i] - (end - i) &lt;= k: end += 1 max_len = max(max_len, end - i) return max_len\nThings to understand:\nv[end] - v[i] - (end - i) This calculates the gap between things\nDrawing 2023-08-20 14.18.38.excalidrawSee the image, this statement handles then no gap and gap case to calculate the correct gap.\n2. Why does it not cause TLE? Because end is not reinitialized before the for loop. So i will move forward with a fixed end after it was filled by a previous i and end will not increment or get to a longer thingy before we hit a gap which we can bridge.O(N) Every element is visited thrice because of the index map creation and the traversal at the bottom. using i and end.\nO(N) Due to the index map.This was a tricky one, I definitely have less practice with sliding window so am terrible at identifying these problems.\nThe window tries to eat elements one by one towards the right. If it is eating one type of elements max_freq, it is going to be chilling. But if it eats some other element that is not max_freq, it will get a strike and after k strikes it is sick enough that it has to remove the element at the back. The affinity of this window is toward the most frequent element. This is the only dish that it can eat. But its affinity may change over the time if it eats way too much of B than A &amp; B becomes the most_freq.class Solution: def longestEqualSubarray(self, A: List[int], k: int) -&gt; int: maxf = i = 0 count = Counter() for j in range(len(A)): count[A[j]] += 1 maxf = max(maxf, count[A[j]]) if j - i + 1 - maxf &gt; k: # bad food = mouth - ass + 1 - good_food count[A[i]] -= 1 i += 1 return maxf\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Problem Statement","level":2,"id":"Problem_Statement_0"},{"heading":"Approach","level":2,"id":"Approach_0"},{"heading":"Solution 1 (Index Map)","level":3,"id":"Solution_1_(Index_Map)_0"},{"heading":"Time &amp; Space Complexities","level":4,"id":"Time_&_Space_Complexities_0"},{"heading":"Solution 2 (Sliding Window)","level":3,"id":"Solution_2_(Sliding_Window)_0"}],"links":["?query=tag:sliding_window","?query=tag:hashing","?query=tag:arrays"],"author":"","coverImageURL":"","fullURL":"leetcode-contests/weekly/359/find-the-longest-equal-subarray.html","pathToRoot":"../../..","attachments":["_excalidraw/drawing-2023-08-20-14.07.38.excalidraw.md","_excalidraw/drawing-2023-08-20-14.18.38.excalidraw.md"],"createdTime":1750879262838,"modifiedTime":1751482449414,"sourceSize":4377,"sourcePath":"Leetcode Contests/Weekly/359/Find the longest equal subarray.md","exportPath":"leetcode-contests/weekly/359/find-the-longest-equal-subarray.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"leetcode-contests/weekly/359/maximize-profit-as-a-salesman.html":{"title":"Maximize Profit as a Salesman","icon":"","description":"<a href=\".?query=tag:dynamic_programming\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#dynamic_programming\">#dynamic_programming</a> <a href=\".?query=tag:arrays\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#arrays\">#arrays</a>\nGot stuck really bad here. I disproved greedy so should have started thinking about DP immediately but could not do it.\nDifficulty: Medium-HardYou are given an integer&nbsp;n&nbsp;representing the number of houses on a number line, numbered from&nbsp;0&nbsp;to&nbsp;n - 1.Additionally, you are given a 2D integer array&nbsp;offers&nbsp;where&nbsp;offers[i] = [starti, endi, goldi], indicating that&nbsp;ith&nbsp;buyer wants to buy all the houses from&nbsp;starti&nbsp;to&nbsp;endi&nbsp;for&nbsp;goldi&nbsp;amount of gold.As a salesman, your goal is to&nbsp;maximize&nbsp;your earnings by strategically selecting and selling houses to buyers.Return&nbsp;the maximum amount of gold you can earn.Note&nbsp;that different buyers can't buy the same house, and some houses may remain unsold.Example 1:Input: n = 5, offers = [[0,0,1],[0,2,2],[1,3,2]]\nOutput: 3\nExplanation: There are 5 houses numbered from 0 to 4 and there are 3 purchase offers.\nWe sell houses in the range [0,0] to 1st buyer for 1 gold and houses in the range [1,3] to 3rd buyer for 2 golds.\nIt can be proven that 3 is the maximum amount of gold we can achieve.Example 2:Input: n = 5, offers = [[0,0,1],[0,2,10],[1,3,2]]\nOutput: 10\nExplanation: There are 5 houses numbered from 0 to 4 and there are 3 purchase offers.\nWe sell houses in the range [0,2] to 2nd buyer for 10 golds.\nIt can be proven that 10 is the maximum amount of gold we can achieve.Constraints:\n1 &lt;= n &lt;= 105\n1 &lt;= offers.length &lt;= 105\noffers[i].length == 3\n0 &lt;= starti&nbsp;&lt;= endi&nbsp;&lt;= n - 1\n1 &lt;= goldi&nbsp;&lt;= 103\nSo here goes the solution...\nBasically you need to sell the houses but you cannot sell the houses you have already sold. Unless you are planning to scam someone. What is the optimal way of choosing the houses?\nOne might think we can go greedily and try to maximize the amount of profit that we are going to get from each buyer. This can be calculated as follows. Now this does not work straight up from the first test case, no matter how you sort them you are not going to get a solution that maximizes the profit. You may chose to sell 0 to 2 only to find out you could've sold 0 and 1 to 3. I thought of merging intervals but that was in vain. So let's proceed to dynamic programming.It is a variation of the knapsack problem. You basically have 2 choices, sell to the buyer and not sell to him. However I thought of this during DP thought process but then I had to keep track of the houses that I already sold using a set or something which cannot be DPed.The solution to this problem is to use sorting and use a search to determine the next buyer if you sold one house. So if a buyer bought houses in range [x, y] then you must only sell houses that are before x-1 or after y + 1. It really helps to sort the array using the y, this way you don't have to worry about x - 1 due to left to right traversal and can use Binary Search to decrease your time to search the next buyer.class Solution: def maximizeTheProfit(self, n: int, offers: List[List[int]]) -&gt; int: profit = 0 N = len(offers) offers.sort(key = lambda x: x[0]) @cache def solve(curr = 0): if curr == N: return 0 not_sell = solve(curr + 1) sell = offers[curr][2] + \\ # This is line break 😊 solve(bisect_right(offers, offers[curr][1], lo = curr, key = lambda x: x[0])) return max(sell, not_sell) return solve()\nSo yeah the main logic lies in sorting the starting indices so that you can consider all the buyers in order.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Problem Statement","level":2,"id":"Problem_Statement_0"},{"heading":"Approach","level":2,"id":"Approach_0"}],"links":["?query=tag:dynamic_programming","?query=tag:arrays"],"author":"","coverImageURL":"","fullURL":"leetcode-contests/weekly/359/maximize-profit-as-a-salesman.html","pathToRoot":"../../..","attachments":[],"createdTime":1750879262839,"modifiedTime":1751482449682,"sourceSize":3769,"sourcePath":"Leetcode Contests/Weekly/359/Maximize Profit as a Salesman.md","exportPath":"leetcode-contests/weekly/359/maximize-profit-as-a-salesman.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"leetcode-contests/leetcode-contests.html":{"title":"Leetcode Contests","icon":"","description":"\nWeekly 359 <a class=\"internal-link\" data-href=\"Leetcode Contests/Weekly/359/Find the longest equal subarray.md\" href=\"leetcode-contests/weekly/359/find-the-longest-equal-subarray.html#_0\" target=\"_self\" rel=\"noopener nofollow\">Find the longest equal subarray</a>\n<br><a class=\"internal-link\" data-href=\"Leetcode Contests/Weekly/359/Maximize Profit as a Salesman.md\" href=\"leetcode-contests/weekly/359/maximize-profit-as-a-salesman.html#_0\" target=\"_self\" rel=\"noopener nofollow\">Maximize Profit as a Salesman</a> ","aliases":[],"inlineTags":[],"frontmatterTags":["#MOCs"],"headers":[],"links":["leetcode-contests/weekly/359/find-the-longest-equal-subarray.html#_0","leetcode-contests/weekly/359/maximize-profit-as-a-salesman.html#_0"],"author":"","coverImageURL":"","fullURL":"leetcode-contests/leetcode-contests.html","pathToRoot":"..","attachments":[],"createdTime":1751483703684,"modifiedTime":1751483703696,"sourceSize":46,"sourcePath":"Leetcode Contests/Leetcode Contests.md","exportPath":"leetcode-contests/leetcode-contests.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"miscellaneous/resources/04-greedy.html":{"title":"04-greedy","icon":"","description":"","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":"","fullURL":"miscellaneous/resources/04-greedy.html","pathToRoot":"../..","attachments":["miscellaneous/resources/04-greedy.html"],"createdTime":1750879262847,"modifiedTime":1750879262847,"sourceSize":1262205,"sourcePath":"Miscellaneous/Resources/04-greedy.pdf","exportPath":"miscellaneous/resources/04-greedy.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"attachment"},"miscellaneous/resources/roadmap-resources.html":{"title":"Roadmap Resources","icon":"","description":"","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":"","fullURL":"miscellaneous/resources/roadmap-resources.html","pathToRoot":"../..","attachments":["miscellaneous/resources/roadmap-resources.html"],"createdTime":1750879262849,"modifiedTime":1750879262849,"sourceSize":82110,"sourcePath":"Miscellaneous/Resources/Roadmap Resources.pdf","exportPath":"miscellaneous/resources/roadmap-resources.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"attachment"},"miscellaneous/complexity-theory-(p,-np,-np-hard-and-np-complete).html":{"title":"Complexity Theory (P, NP, NP hard and NP complete)","icon":"","description":"P = The set of problems solvable in polynomial time. Algorithms are known to us.\nNP = The set of problems for which given an answer the correctness of it can be verified in a polynomial time.\nNP problems are decision based every guess is either Yes of No, and we want the correct guess yes from the computer. If we wanted a no, then that set of problems is co-NP or complementary NP.\nNon deterministic means certain steps are unknown and are like a guess, The computer has to guess from a polynomial number of options and we assume that it makes a good random guess.NP problems may have a way to write a non deterministic algorithm poly time algo for solving them. (NP complete guarantee it)The boolean of formula of the form. Given a boolean formula f, can you set the inputs in such a way that the expression evaluates to a 1.\n<img alt=\"Pasted image 20230917195830.png\" src=\"_assets/pasted-image-20230917195830.png\" target=\"_self\">The 3-SAT problem is a subset of the sat problem in which the number of inputs is limited to 3.It was the first proven NP complete algorithm.They may or may not be NP but they are hardest of the known NP problems (as far as we know they may turn out to be), any problem which is as hard as hardest NP problem they are considered NP hard. If one np hard is solved it doesn't mean that all of them would be solved.<br>\nRead More <a data-tooltip-position=\"top\" aria-label=\"https://en.wikipedia.org/wiki/NP-hardness\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://en.wikipedia.org/wiki/NP-hardness\" target=\"_self\">here</a>Subset of NP problems with a special property if you find solution to one of them you can solve all of them. The answers can be verified in polynomial time since it's a subset of NP. They also are a part of NP hard problems that means they are as hard as the hardest of the NP problems i.e. As we mentioned earlier np hard may or may not be np these are those proven to be np.\nSome of the NP complete problems: BSAT, Travelling salesman, knapsack problem, subset sum, clique, partition subset equal sum, Hamiltonian cyclesDrawing 2023-09-17 20.42.18.excalidraw<br><img class=\"emoji is-unresolved\" draggable=\"false\" alt=\"⚠\" src=\"https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/26a0.svg\" height=\"14px\" target=\"_self\" style=\"max-width: 100%;\"> Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. <img class=\"emoji is-unresolved\" draggable=\"false\" alt=\"⚠\" src=\"https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/26a0.svg\" height=\"14px\" target=\"_self\" style=\"max-width: 100%;\">difficulty P NP NP hard NP complete (May increase) Reduction means converting one NP to other NP problems. If one NP problem is solve does not mean all of them will be solved like NP hard, only NP complete problems offer that. ","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"The Boolean Satisfiability NP problem","level":3,"id":"The_Boolean_Satisfiability_NP_problem_0"},{"heading":"NP Hard problems","level":1,"id":"NP_Hard_problems_0"},{"heading":"NP complete","level":1,"id":"NP_complete_0"},{"heading":"Text Elements","level":1,"id":"Text_Elements_0"},{"heading":"Reduction","level":2,"id":"Reduction_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"miscellaneous/complexity-theory-(p,-np,-np-hard-and-np-complete).html","pathToRoot":"..","attachments":["_assets/pasted-image-20230917195830.png","_excalidraw/drawing-2023-09-17-20.42.18.excalidraw.md"],"createdTime":1750879262839,"modifiedTime":1751482449887,"sourceSize":2201,"sourcePath":"Miscellaneous/Complexity Theory (P, NP, NP hard and NP complete).md","exportPath":"miscellaneous/complexity-theory-(p,-np,-np-hard-and-np-complete).html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"miscellaneous/galen's-guide-to-being-a-successful-competitive-programmer.html":{"title":"Galen's guide to being a successful competitive programmer","icon":"","description":"\"No roadmap will work if you are not practicing problems the right way that is practicing to learn...\" I am practicing to get better at solving. In editorials try to find out how to come up with this solutions. Try to spend as much time on a problem as you can. Think of things that you aren't already familiar with. Spend time thinking about problems, don't let your <img class=\"emoji is-unresolved\" draggable=\"false\" alt=\"🧠\" src=\"https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f9e0.svg\" height=\"14px\" target=\"_self\" style=\"max-width: 100%;\"> sit idle. Ask why more and more, why is this &amp; why is that. It is easy to lie to yourself that you are \"practicing\" by spending time and not deeply understanding the problems.\nThe best practice is the practice where you are motivated. Motivation has to be interest in the problems. Solve problems with no intentions to read the editorials. Beginners don't need to learn anything just try to come up with A,B,C solutions. Don't jump for complex algorithms for these. (skipping problems and making excuses to do it in leetcode randomizer)\nAny reasonable method that does not let you deceive yourself is a good practice method. If you don't like it, it's going to be harder. Comparisons are not good, compare yourself to you 1 year earlier. Fix your health and sleep cycle, it will help only if a little. Find some friends if you can. Do not become over reliant however. Improve skills and not rating. You can take breaks it is not a crime. Practice to build confidence. Upsolve!!! Don't guess problems try to prove the solutions. Not learning from problems.\nFocusing too hard on speed, for long term improvement this helps a lot.\nLook for your weaknesses and work on them (topics that you suck at).\nDon't jump directly into code try to build the solution and proving it to yourself. Take time to look for edge cases.\nDo not misread.\nDon't leave the problem without attempting, if its hard then that does not mean you cannot do it.\nProblems should be difficult for you. Find the problem places in Roadmap Resources. Do what is fun.\n2-4 hours a day is enough.\nDaily problem quotas are bad.\nShort time: 20-45 minutes, Medium time: 1-4 hours both after being stuck get to the point where you are stuck.\nTry to look for though processes in editorials. Why your ideas did not work. You can read editorials line by line and think about each line for 10 minutes.\nDo a healthy mix of random problems and topic based problems. Focus more on random problems.\nSelect random problems to solve, taking note of weaknesses. To handle a weakness, do some problems involving that weakness, then go back to random problems. If the weakness is still an issue, continue with random problems, but skewed to have more problems with that weakness. Math and basic reasoning. <br><a href=\".?query=tag:math\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#math\">#math</a> <a href=\".?query=tag:greedy\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#greedy\">#greedy</a> <a href=\".?query=tag:constructive\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#constructive\">#constructive</a> <a href=\".?query=tag:brute-force\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#brute-force\">#brute-force</a> <a href=\".?query=tag:searching\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#searching\">#searching</a> <a href=\".?query=tag:sorting\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#sorting\">#sorting</a> <a href=\".?query=tag:strings\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#strings\">#strings</a> <a href=\".?query=tag:number-theory\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#number-theory\">#number-theory</a> <br><a href=\".?query=tag:binary-search\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#binary-search\">#binary-search</a> <a href=\".?query=tag:two-pointers\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#two-pointers\">#two-pointers</a>\nSolve A and B smoothly (div 2) and A, B, C for div 3 contests.\nJust improve reasoning, practice random problems.\nFocus on weaknesses. <br><a href=\".?query=tag:brute-force\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#brute-force\">#brute-force</a> <a href=\".?query=tag:sorting\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#sorting\">#sorting</a> <a href=\".?query=tag:number-theory\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#number-theory\">#number-theory</a> <a href=\".?query=tag:strings\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#strings\">#strings</a> <a href=\".?query=tag:stl\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#stl\">#stl</a> <br><a href=\".?query=tag:bitwise\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#bitwise\">#bitwise</a> <a href=\".?query=tag:binary-search\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#binary-search\">#binary-search</a> <a href=\".?query=tag:bitwise\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#bitwise\">#bitwise</a> <a href=\".?query=tag:dynamic_programming\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#dynamic_programming\">#dynamic_programming</a> <a href=\".?query=tag:combinatorics\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#combinatorics\">#combinatorics</a> <a href=\".?query=tag:range-queries\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#range-queries\">#range-queries</a>\nSolve A, B fast and solve C and A-D for div 3 contests. still a lot of reasoning.\n<br>above topics + <a href=\".?query=tag:modular-arithmetic\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#modular-arithmetic\">#modular-arithmetic</a> <a href=\".?query=tag:gcd\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#gcd\">#gcd</a> <a href=\".?query=tag:prime-factors\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#prime-factors\">#prime-factors</a> <a href=\".?query=tag:prefix-sum\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#prefix-sum\">#prefix-sum</a> <a href=\".?query=tag:recursions\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#recursions\">#recursions</a> <a href=\".?query=tag:dynamic_programming\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#dynamic_programming\">#dynamic_programming</a> <a href=\".?query=tag:graphs\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#graphs\">#graphs</a> <a href=\".?query=tag:trees\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#trees\">#trees</a> <a href=\".?query=tag:bfs\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#bfs\">#bfs</a> <a href=\".?query=tag:dfs\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#dfs\">#dfs</a> <a href=\".?query=tag:dsu\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#dsu\">#dsu</a> <a href=\".?query=tag:segment-trees\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#segment-trees\">#segment-trees</a> <a href=\".?query=tag:hashing\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#hashing\">#hashing</a> Solve quickly 3 problems in div 2 for div 3 A-D or A-E.\nThis is not rigid you may blow some contests. You have done it, you have good practice strats.\n<br>above topics + <a href=\".?query=tag:tree-dp\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#tree-dp\">#tree-dp</a> <a href=\".?query=tag:proofs\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#proofs\">#proofs</a> <a href=\".?query=tag:constructive\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#constructive\">#constructive</a> <a href=\".?query=tag:inclusion-exclusion\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#inclusion-exclusion\">#inclusion-exclusion</a> <a href=\".?query=tag:probability\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#probability\">#probability</a> <a href=\".?query=tag:shortest-path\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#shortest-path\">#shortest-path</a> <a href=\".?query=tag:MST\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#MST\">#MST</a> <a href=\".?query=tag:game-theory\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#game-theory\">#game-theory</a> Solve A-C consistently and quickly. Its just you and practice. <br><a href=\".?query=tag:graphs\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#graphs\">#graphs</a> <a href=\".?query=tag:toposort\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#toposort\">#toposort</a> <a href=\".?query=tag:expected-value\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#expected-value\">#expected-value</a> <a href=\".?query=tag:bitwise\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#bitwise\">#bitwise</a> A-D consistently in div 2 and all in div 3. new problems are based on reasoning. Knowing the basics is enough.\nA-B div 1 A-E div 2.\n<br><a data-href=\"Roadmap Resources.pdf\" href=\"miscellaneous/resources/roadmap-resources.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Roadmap Resources.pdf</a>","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"General","level":1,"id":"General_0"},{"heading":"The Learning Mindset","level":2,"id":"The_Learning_Mindset_0"},{"heading":"How to practice","level":3,"id":"How_to_practice_0"},{"heading":"Mistakes","level":2,"id":"Mistakes_0"},{"heading":"Practice","level":1,"id":"Practice_0"},{"heading":"Rating based advice","level":1,"id":"Rating_based_advice_0"},{"heading":"0-999","level":2,"id":"0-999_0"},{"heading":"1000-1199","level":2,"id":"1000-1199_0"},{"heading":"1200-1399","level":2,"id":"1200-1399_0"},{"heading":"1400-1599","level":2,"id":"1400-1599_0"},{"heading":"1600-1899","level":2,"id":"1600-1899_0"},{"heading":"1900-2099","level":2,"id":"1900-2099_0"},{"heading":"Conclusion","level":1,"id":"Conclusion_0"}],"links":["?query=tag:math","?query=tag:greedy","?query=tag:constructive","?query=tag:brute-force","?query=tag:searching","?query=tag:sorting","?query=tag:strings","?query=tag:number-theory","?query=tag:binary-search","?query=tag:two-pointers","?query=tag:brute-force","?query=tag:sorting","?query=tag:number-theory","?query=tag:strings","?query=tag:stl","?query=tag:bitwise","?query=tag:binary-search","?query=tag:bitwise","?query=tag:dynamic_programming","?query=tag:combinatorics","?query=tag:range-queries","?query=tag:modular-arithmetic","?query=tag:gcd","?query=tag:prime-factors","?query=tag:prefix-sum","?query=tag:recursions","?query=tag:dynamic_programming","?query=tag:graphs","?query=tag:trees","?query=tag:bfs","?query=tag:dfs","?query=tag:dsu","?query=tag:segment-trees","?query=tag:hashing","?query=tag:tree-dp","?query=tag:proofs","?query=tag:constructive","?query=tag:inclusion-exclusion","?query=tag:probability","?query=tag:shortest-path","?query=tag:MST","?query=tag:game-theory","?query=tag:graphs","?query=tag:toposort","?query=tag:expected-value","?query=tag:bitwise","miscellaneous/resources/roadmap-resources.html#_0"],"author":"","coverImageURL":"","fullURL":"miscellaneous/galen's-guide-to-being-a-successful-competitive-programmer.html","pathToRoot":"..","attachments":[],"createdTime":1750879262840,"modifiedTime":1751482450102,"sourceSize":4096,"sourcePath":"Miscellaneous/Galen's guide to being a successful competitive programmer.md","exportPath":"miscellaneous/galen's-guide-to-being-a-successful-competitive-programmer.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"miscellaneous/mathematical-induction.html":{"title":"Mathematical Induction","icon":"","description":"Mathematical Induction is a mathematical technique&nbsp;which is used to prove a statement, a formula or a theorem is true for every natural number.It can be used to prove some pain in the ass greedy algorithms in your head so that you can start coding.if holds and , then also holds.Example: There are N balls, and the first ball is red. And if nth ball is of color x then (n + 1)th ball is also of color x. Then we can conclude that all balls are red.If you topple the domino at position 0, all dominoes topple.\nInduction hypothesis: Define your induction hypothesis.\nProve for Base case: Prove that your hypothesis is true for base case.\nAssume hypothesis to be true of P(n)\nProve for P(n + 1) using 2 and 3\nProof for N meetings in a room<img alt=\"Pasted image 20230924234109.png\" src=\"_assets/pasted-image-20230924234109.png\" target=\"_self\"><br>Following resource is excellent for understanding some most frequent and established greedy problems. More problems are in this brain in the <a href=\".?query=tag:greedy\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#greedy\">#greedy</a> tag.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Statement","level":1,"id":"Statement_0"},{"heading":"Steps to prove","level":1,"id":"Steps_to_prove_0"},{"heading":"Greedy Problems","level":1,"id":"Greedy_Problems_0"}],"links":["?query=tag:greedy"],"author":"","coverImageURL":"","fullURL":"miscellaneous/mathematical-induction.html","pathToRoot":"..","attachments":["_assets/pasted-image-20230924234109.png","miscellaneous/resources/04-greedy.html"],"createdTime":1750879262840,"modifiedTime":1751482450812,"sourceSize":1104,"sourcePath":"Miscellaneous/Mathematical Induction.md","exportPath":"miscellaneous/mathematical-induction.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"miscellaneous/miscellaneous.html":{"title":"Miscellaneous","icon":"","description":"\n<a class=\"internal-link\" data-href=\"Miscellaneous/Complexity Theory (P, NP, NP hard and NP complete).md\" href=\"miscellaneous/complexity-theory-(p,-np,-np-hard-and-np-complete).html#_0\" target=\"_self\" rel=\"noopener nofollow\">Complexity Theory (P, NP, NP hard and NP complete)</a> <br><a class=\"internal-link\" data-href=\"Miscellaneous/Complexity Theory (P, NP, NP hard and NP complete).md#NP Hard problems\" href=\"miscellaneous/complexity-theory-(p,-np,-np-hard-and-np-complete).html#NP_Hard_problems_0\" target=\"_self\" rel=\"noopener nofollow\">NP Hard problems</a>\n<br><a class=\"internal-link\" data-href=\"Miscellaneous/Complexity Theory (P, NP, NP hard and NP complete).md#NP complete\" href=\"miscellaneous/complexity-theory-(p,-np,-np-hard-and-np-complete).html#NP_complete_0\" target=\"_self\" rel=\"noopener nofollow\">NP complete</a> <br><a class=\"internal-link\" data-href=\"Miscellaneous/Complexity Theory (P, NP, NP hard and NP complete).md#NP complete#Reduction\" href=\"miscellaneous/complexity-theory-(p,-np,-np-hard-and-np-complete).html#NP_complete_0\" target=\"_self\" rel=\"noopener nofollow\">Reduction</a> <br><a class=\"internal-link\" data-href=\"Miscellaneous/Galen's guide to being a successful competitive programmer.md\" href=\"miscellaneous/galen's-guide-to-being-a-successful-competitive-programmer.html#_0\" target=\"_self\" rel=\"noopener nofollow\">Galen's guide to being a successful competitive programmer</a> <br><a class=\"internal-link\" data-href=\"Miscellaneous/Galen's guide to being a successful competitive programmer.md#General\" href=\"miscellaneous/galen's-guide-to-being-a-successful-competitive-programmer.html#General_0\" target=\"_self\" rel=\"noopener nofollow\">General</a> <br><a class=\"internal-link\" data-href=\"Miscellaneous/Galen's guide to being a successful competitive programmer.md#General#The Learning Mindset\" href=\"miscellaneous/galen's-guide-to-being-a-successful-competitive-programmer.html#General_0\" target=\"_self\" rel=\"noopener nofollow\">The Learning Mindset</a>\n<br><a class=\"internal-link\" data-href=\"Miscellaneous/Galen's guide to being a successful competitive programmer.md#General#Mistakes\" href=\"miscellaneous/galen's-guide-to-being-a-successful-competitive-programmer.html#General_0\" target=\"_self\" rel=\"noopener nofollow\">Mistakes</a> <br><a class=\"internal-link\" data-href=\"Miscellaneous/Galen's guide to being a successful competitive programmer.md#Practice\" href=\"miscellaneous/galen's-guide-to-being-a-successful-competitive-programmer.html#Practice_0\" target=\"_self\" rel=\"noopener nofollow\">Practice</a>\n<br><a class=\"internal-link\" data-href=\"Miscellaneous/Galen's guide to being a successful competitive programmer.md#Rating based advice\" href=\"miscellaneous/galen's-guide-to-being-a-successful-competitive-programmer.html#Rating_based_advice_0\" target=\"_self\" rel=\"noopener nofollow\">Rating based advice</a> <br><a class=\"internal-link\" data-href=\"Miscellaneous/Galen's guide to being a successful competitive programmer.md#Rating based advice#0-999\" href=\"miscellaneous/galen's-guide-to-being-a-successful-competitive-programmer.html#Rating_based_advice_0\" target=\"_self\" rel=\"noopener nofollow\">0-999</a>\n<br><a class=\"internal-link\" data-href=\"Miscellaneous/Galen's guide to being a successful competitive programmer.md#Rating based advice#1000-1199\" href=\"miscellaneous/galen's-guide-to-being-a-successful-competitive-programmer.html#Rating_based_advice_0\" target=\"_self\" rel=\"noopener nofollow\">1000-1199</a>\n<br><a class=\"internal-link\" data-href=\"Miscellaneous/Galen's guide to being a successful competitive programmer.md#Rating based advice#1200-1399\" href=\"miscellaneous/galen's-guide-to-being-a-successful-competitive-programmer.html#Rating_based_advice_0\" target=\"_self\" rel=\"noopener nofollow\">1200-1399</a>\n<br><a class=\"internal-link\" data-href=\"Miscellaneous/Galen's guide to being a successful competitive programmer.md#Rating based advice#1400-1599\" href=\"miscellaneous/galen's-guide-to-being-a-successful-competitive-programmer.html#Rating_based_advice_0\" target=\"_self\" rel=\"noopener nofollow\">1400-1599</a>\n<br><a class=\"internal-link\" data-href=\"Miscellaneous/Galen's guide to being a successful competitive programmer.md#Rating based advice#1600-1899\" href=\"miscellaneous/galen's-guide-to-being-a-successful-competitive-programmer.html#Rating_based_advice_0\" target=\"_self\" rel=\"noopener nofollow\">1600-1899</a>\n<br><a class=\"internal-link\" data-href=\"Miscellaneous/Galen's guide to being a successful competitive programmer.md#Rating based advice#1900-2099\" href=\"miscellaneous/galen's-guide-to-being-a-successful-competitive-programmer.html#Rating_based_advice_0\" target=\"_self\" rel=\"noopener nofollow\">1900-2099</a> <br><a class=\"internal-link\" data-href=\"Miscellaneous/Galen's guide to being a successful competitive programmer.md#Conclusion\" href=\"miscellaneous/galen's-guide-to-being-a-successful-competitive-programmer.html#Conclusion_0\" target=\"_self\" rel=\"noopener nofollow\">Conclusion</a> <br><a class=\"internal-link\" data-href=\"Miscellaneous/Mathematical Induction.md\" href=\"miscellaneous/mathematical-induction.html#_0\" target=\"_self\" rel=\"noopener nofollow\">Mathematical Induction</a> <br><a class=\"internal-link\" data-href=\"Miscellaneous/Mathematical Induction.md#Statement\" href=\"miscellaneous/mathematical-induction.html#Statement_0\" target=\"_self\" rel=\"noopener nofollow\">Statement</a>\n<br><a class=\"internal-link\" data-href=\"Miscellaneous/Mathematical Induction.md#Steps to prove\" href=\"miscellaneous/mathematical-induction.html#Steps_to_prove_0\" target=\"_self\" rel=\"noopener nofollow\">Steps to prove</a>\n<br><a class=\"internal-link\" data-href=\"Miscellaneous/Mathematical Induction.md#Greedy Problems\" href=\"miscellaneous/mathematical-induction.html#Greedy_Problems_0\" target=\"_self\" rel=\"noopener nofollow\">Greedy Problems</a> <br><a class=\"internal-link\" data-href=\"Miscellaneous/Policy Based Data Structures.md\" href=\"miscellaneous/policy-based-data-structures.html#_0\" target=\"_self\" rel=\"noopener nofollow\">Policy Based Data Structures</a>\nResources <br><a class=\"internal-link\" data-href=\"Miscellaneous/Resources/04-greedy.pdf\" href=\"miscellaneous/resources/04-greedy.html#_0\" target=\"_self\" rel=\"noopener nofollow\">04-greedy</a>\n<br><a class=\"internal-link\" data-href=\"Miscellaneous/Resources/Roadmap Resources.pdf\" href=\"miscellaneous/resources/roadmap-resources.html#_0\" target=\"_self\" rel=\"noopener nofollow\">Roadmap Resources</a> ","aliases":[],"inlineTags":[],"frontmatterTags":["#MOCs"],"headers":[],"links":["miscellaneous/complexity-theory-(p,-np,-np-hard-and-np-complete).html#_0","miscellaneous/complexity-theory-(p,-np,-np-hard-and-np-complete).html#NP_Hard_problems_0","miscellaneous/complexity-theory-(p,-np,-np-hard-and-np-complete).html#NP_complete_0","miscellaneous/complexity-theory-(p,-np,-np-hard-and-np-complete).html#NP_complete_0","miscellaneous/galen's-guide-to-being-a-successful-competitive-programmer.html#_0","miscellaneous/galen's-guide-to-being-a-successful-competitive-programmer.html#General_0","miscellaneous/galen's-guide-to-being-a-successful-competitive-programmer.html#General_0","miscellaneous/galen's-guide-to-being-a-successful-competitive-programmer.html#General_0","miscellaneous/galen's-guide-to-being-a-successful-competitive-programmer.html#Practice_0","miscellaneous/galen's-guide-to-being-a-successful-competitive-programmer.html#Rating_based_advice_0","miscellaneous/galen's-guide-to-being-a-successful-competitive-programmer.html#Rating_based_advice_0","miscellaneous/galen's-guide-to-being-a-successful-competitive-programmer.html#Rating_based_advice_0","miscellaneous/galen's-guide-to-being-a-successful-competitive-programmer.html#Rating_based_advice_0","miscellaneous/galen's-guide-to-being-a-successful-competitive-programmer.html#Rating_based_advice_0","miscellaneous/galen's-guide-to-being-a-successful-competitive-programmer.html#Rating_based_advice_0","miscellaneous/galen's-guide-to-being-a-successful-competitive-programmer.html#Rating_based_advice_0","miscellaneous/galen's-guide-to-being-a-successful-competitive-programmer.html#Conclusion_0","miscellaneous/mathematical-induction.html#_0","miscellaneous/mathematical-induction.html#Statement_0","miscellaneous/mathematical-induction.html#Steps_to_prove_0","miscellaneous/mathematical-induction.html#Greedy_Problems_0","miscellaneous/policy-based-data-structures.html#_0","miscellaneous/resources/04-greedy.html#_0","miscellaneous/resources/roadmap-resources.html#_0"],"author":"","coverImageURL":"","fullURL":"miscellaneous/miscellaneous.html","pathToRoot":"..","attachments":[],"createdTime":1751483713257,"modifiedTime":1751483713257,"sourceSize":46,"sourcePath":"Miscellaneous/Miscellaneous.md","exportPath":"miscellaneous/miscellaneous.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"miscellaneous/policy-based-data-structures.html":{"title":"Policy Based Data Structures","icon":"","description":"The g++ compiler supports a lot of additional functionality that is not the part of the official C++ standard. One of these is the PBDS short for the policy based data structures. These are designed for high performance and often times have useful features not available in the STL. They are designed to interface with the STL containers so that both of them can be used in conjunction.#include &lt;ext/pb_ds/assoc_container.hpp&gt; // Common file\n// The data structure specific header file\nusing namespace __gnu_pbds;\nOrdered set is like the std::set but it supports additional features:\nGetting the cardinal number of an element i.e. the index of the element in the set in time. Normal sets need linear time to do this and there is no concept of index in the normal sets.\nGetting the number of elements smaller than the current element in time. Following code demonstrates the usage.// Program showing a policy-based data structure.\n#include &lt;ext/pb_ds/assoc_container.hpp&gt; // Common file\n#include &lt;ext/pb_ds/tree_policy.hpp&gt;\n#include &lt;functional&gt; // for less and less_equal for multiset\n#include &lt;iostream&gt;\nusing namespace __gnu_pbds;\nusing namespace std; typedef tree&lt;int, null_type, less&lt;int&gt;, rb_tree_tag, tree_order_statistics_node_update&gt; ordered_set; // Driver code\nint main()\n{ ordered_set p; p.insert(5); p.insert(2); p.insert(6); p.insert(4); // value at 3rd index in sorted array. cout &lt;&lt; \"The value at 3rd index ::\" &lt;&lt; *p.find_by_order(3) &lt;&lt; endl; // index of number 6 cout &lt;&lt; \"The index of number 6::\" &lt;&lt; p.order_of_key(6) &lt;&lt; endl; // number 7 not in the set but it will show the // index number if it was there in sorted array. cout &lt;&lt; \"The index of number seven ::\" &lt;&lt; p.order_of_key(7) &lt;&lt; endl; return 0;\n} ","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Ordered Set / Ordered Multiset","level":2,"id":"Ordered_Set_/_Ordered_Multiset_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"miscellaneous/policy-based-data-structures.html","pathToRoot":"..","attachments":[],"createdTime":1750879262840,"modifiedTime":1751482451057,"sourceSize":1853,"sourcePath":"Miscellaneous/Policy Based Data Structures.md","exportPath":"miscellaneous/policy-based-data-structures.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"problems/gfg/alien-dictionary.html":{"title":"Alien Dictionary","icon":"","description":"<a href=\".?query=tag:toposort\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#toposort\">#toposort</a> <a href=\".?query=tag:graphs\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#graphs\">#graphs</a> <a href=\".?query=tag:bfs\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#bfs\">#bfs</a> <a href=\".?query=tag:dfs\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#dfs\">#dfs</a>Given a sorted dictionary of an alien language having N words and&nbsp;k starting alphabets of standard dictionary. Find the order of characters in the alien language.\nNote:&nbsp;Many orders may be&nbsp;possible for a particular test case, thus&nbsp;you may return any valid order and&nbsp;output will be 1 if the order of string returned by the function is correct else 0 denoting incorrect string returned. &nbsp;Example 1:Input:\nN = 5, K = 4\ndict = {\"baa\",\"abcd\",\"abca\",\"cab\",\"cad\"}\nOutput:\n1\nExplanation:\nHere order of characters is\n'b', 'd', 'a', 'c' Note that words are sorted\nand in the given language \"baa\" comes before\n\"abcd\", therefore 'b' is before 'a' in output.\nSimilarly we can find other orders.Example 2:Input:\nN = 3, K = 3\ndict = {\"caa\",\"aaa\",\"aab\"}\nOutput:\n1\nExplanation:\nHere order of characters is\n'c', 'a', 'b' Note that words are sorted\nand in the given language \"caa\" comes before\n\"aaa\", therefore 'c' is before 'a' in output.\nSimilarly we can find other orders.Your Task:\nYou don't need to read or print anything. Your task is to complete the function&nbsp;findOrder()&nbsp;which takes&nbsp;&nbsp;the string array dict[], its size N&nbsp;and the integer K as input parameter&nbsp;and returns a string denoting the order of characters in the alien language.Expected Time Complexity:&nbsp;O(N * |S| + K) , where |S| denotes maximum length.\nExpected Space Complexity:&nbsp;O(K)Constraints:\n1 ≤ N, M ≤ 300\n1 ≤ K&nbsp;≤ 26\n1 ≤ Length of words&nbsp;≤ 50This question seems impossible at first, but if you read the question like this, the intuition appears to be more clear.\nFind the ordering of the alphabets such that if a word w1 appears after the word w2 due to the alphabet x &lt; y then x should come before y in the ordering.\nThis seems oddly familiar to the topological sorting that we have done earlier.Building The Graph\nNow that we have thought that we may be able to use toposort to solve this problem, How exactly do I make the graph. It is also hidden in the above intuition line, There is an edge between x and y if two words w1 and w2 differ by x &amp; y and w1 comes before w2 that means there is an edge from x to y.def kahn_toposort(adj): # finding the indegrees indegrees = {v: 0 for v in adj.keys()} for nbrs in adj.values(): for nbr in nbrs: indegrees[nbr] += 1 q = deque() toposort = [] for v, indegree in indegrees.items(): if indegree == 0: q.append(v) # kind of like a multi source bfs while q: curr = q.popleft() toposort.append(curr) for nbr in adj[curr]: indegrees[nbr] -= 1 if indegrees[nbr] == 0: q.append(nbr) # print(toposort) return toposort class Solution: def findOrder(self,alien_dict, N, K): # building the graph adj = {chr(ord('a') + i):[] for i in range(K)} for w1, w2 in pairwise(alien_dict): for char1, char2 in zip(w1, w2): if char1 != char2: adj[char1].append(char2) break # only first unequal letter is responsible for order return kahn_toposort(adj) ","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Problem Statement","level":1,"id":"Problem_Statement_0"},{"heading":"Approach","level":1,"id":"Approach_0"},{"heading":"Solution","level":2,"id":"Solution_0"}],"links":["?query=tag:toposort","?query=tag:graphs","?query=tag:bfs","?query=tag:dfs"],"author":"","coverImageURL":"","fullURL":"problems/gfg/alien-dictionary.html","pathToRoot":"../..","attachments":[],"createdTime":1750879262850,"modifiedTime":1750879439765,"sourceSize":3303,"sourcePath":"Problems/GFG/Alien Dictionary.md","exportPath":"problems/gfg/alien-dictionary.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"problems/gfg/flood-fill-algorithm.html":{"title":"Flood fill algorithm","icon":"","description":"<a href=\".?query=tag:graphs\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#graphs\">#graphs</a> <a href=\".?query=tag:implicit-bfs\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#implicit-bfs\">#implicit-bfs</a> <a href=\".?query=tag:implicit-dfs\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#implicit-dfs\">#implicit-dfs</a>An&nbsp;image&nbsp;is represented by a 2-D array of integers, each integer representing the pixel value of the image.Given a coordinate&nbsp;(sr, sc)&nbsp;representing the starting pixel (row and column) of the flood fill, and a pixel value&nbsp;newColor, \"flood fill\" the image.To perform a&nbsp;\"flood fill\", consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the&nbsp;same color&nbsp;as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the&nbsp;same color&nbsp;as the starting pixel), and so on. Replace the color of all of the aforementioned pixels with the newColor.Example 1:Input: image = {{1,1,1},{1,1,0},{1,0,1}},\nsr = 1, sc = 1, newColor = 2.\nOutput: {{2,2,2},{2,2,0},{2,0,1}}\nExplanation: From the center of the image\n(with position (sr, sc) = (1, 1)), all\npixels connected by a path of the same color\nas the starting pixel are colored with the new\ncolor.Note the bottom corner is not colored 2,\nbecause it is not 4-directionally connected to\nthe starting pixel.Your Task:\nYou don't need to read or print anything. Your task is to complete the function&nbsp;floodFill()&nbsp;which takes image, sr, sc and newColor as input parameter and returns the image after flood filling. &nbsp;Expected Time Compelxity:&nbsp;O(nm)\nExpected Space Complexity:&nbsp;O(nm) &nbsp;Constraints:\n1 &lt;= n &lt;= m &lt;= 100\n0 &lt;= pixel values &lt;= 10\n0 &lt;= sr &lt;= (n-1)\n0 &lt;= sc &lt;= (m-1)just use implicit bfs/dfs and keep track of colors for the thing. We are allowed to modify the matrix itself here, best practice is to not modify the source data.from collections import deque\n# Snippet created by sameer 21-08-2023\ndef valid_neighbors(x, y, graph): m, n = len(graph), len(graph[0]) delta = [(-1,0),(0,-1),(0,1),(1,0)] neighbors = [] for dx,dy in delta: r, c = x + dx, y + dy if 0&lt;=r&lt;m and 0&lt;=c&lt;n: neighbors.append((r,c)) return neighbors def bfs_impl(matrix, vertex, newColor): sr, sc = vertex source_color = matrix[sr][sc] matrix[sr][sc] = newColor q = deque() q.append(vertex) while q: x, y = q.popleft() for r, c in valid_neighbors(x, y, matrix): if matrix[r][c] != newColor and matrix[r][c] == source_color: q.append((r, c)) matrix[r][c] = newColor class Solution: def floodFill(self, image, sr, sc, newColor): bfs_impl(image, (sr, sc), newColor) return image ","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Problem Statement","level":1,"id":"Problem_Statement_0"},{"heading":"Approach","level":1,"id":"Approach_0"},{"heading":"Solution","level":1,"id":"Solution_0"}],"links":["?query=tag:graphs","?query=tag:implicit-bfs","?query=tag:implicit-dfs"],"author":"","coverImageURL":"","fullURL":"problems/gfg/flood-fill-algorithm.html","pathToRoot":"../..","attachments":[],"createdTime":1750879262850,"modifiedTime":1751482451340,"sourceSize":2575,"sourcePath":"Problems/GFG/Flood fill algorithm.md","exportPath":"problems/gfg/flood-fill-algorithm.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"problems/gfg/gfg.html":{"title":"GFG","icon":"","description":"\n<a class=\"internal-link\" data-href=\"Problems/GFG/Alien Dictionary.md\" href=\"problems/gfg/alien-dictionary.html#_0\" target=\"_self\" rel=\"noopener nofollow\">Alien Dictionary</a> <br><a class=\"internal-link\" data-href=\"Problems/GFG/Alien Dictionary.md#Problem Statement\" href=\"problems/gfg/alien-dictionary.html#Problem_Statement_0\" target=\"_self\" rel=\"noopener nofollow\">Problem Statement</a>\n<br><a class=\"internal-link\" data-href=\"Problems/GFG/Alien Dictionary.md#Approach\" href=\"problems/gfg/alien-dictionary.html#Approach_0\" target=\"_self\" rel=\"noopener nofollow\">Approach</a> <br><a class=\"internal-link\" data-href=\"Problems/GFG/Alien Dictionary.md#Approach#Solution\" href=\"problems/gfg/alien-dictionary.html#Approach_0\" target=\"_self\" rel=\"noopener nofollow\">Solution</a> <br><a class=\"internal-link\" data-href=\"Problems/GFG/Flood fill algorithm.md\" href=\"problems/gfg/flood-fill-algorithm.html#_0\" target=\"_self\" rel=\"noopener nofollow\">Flood fill algorithm</a> <br><a class=\"internal-link\" data-href=\"Problems/GFG/Flood fill algorithm.md#Problem Statement\" href=\"problems/gfg/flood-fill-algorithm.html#Problem_Statement_0\" target=\"_self\" rel=\"noopener nofollow\">Problem Statement</a>\n<br><a class=\"internal-link\" data-href=\"Problems/GFG/Flood fill algorithm.md#Approach\" href=\"problems/gfg/flood-fill-algorithm.html#Approach_0\" target=\"_self\" rel=\"noopener nofollow\">Approach</a>\n<br><a class=\"internal-link\" data-href=\"Problems/GFG/Flood fill algorithm.md#Solution\" href=\"problems/gfg/flood-fill-algorithm.html#Solution_0\" target=\"_self\" rel=\"noopener nofollow\">Solution</a> ","aliases":[],"inlineTags":[],"frontmatterTags":["#MOCs"],"headers":[],"links":["problems/gfg/alien-dictionary.html#_0","problems/gfg/alien-dictionary.html#Problem_Statement_0","problems/gfg/alien-dictionary.html#Approach_0","problems/gfg/alien-dictionary.html#Approach_0","problems/gfg/flood-fill-algorithm.html#_0","problems/gfg/flood-fill-algorithm.html#Problem_Statement_0","problems/gfg/flood-fill-algorithm.html#Approach_0","problems/gfg/flood-fill-algorithm.html#Solution_0"],"author":"","coverImageURL":"","fullURL":"problems/gfg/gfg.html","pathToRoot":"../..","attachments":[],"createdTime":1751483717796,"modifiedTime":1751483717797,"sourceSize":46,"sourcePath":"Problems/GFG/GFG.md","exportPath":"problems/gfg/gfg.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"problems/leetcode/440-kth-lexicographically-smallest-number.html":{"title":"440 Kth lexicographically smallest number","icon":"","description":"<a href=\".?query=tag:trees\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#trees\">#trees</a> <a href=\".?query=tag:hard\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#hard\">#hard</a>\nThis is a followup of the return lexicographically sorted list of natural numbers up to n. There you could just sort it by converting each number to string, but the restraint was to do it in time.I wrote a method to just do that, bascially a next method that will tell what the next number will be given a current number. The implementation of the next function is belowdef next(curr: int, n: int) -&gt; int: if next * 10 &lt;= n: return next * 10 else: while next % 10 == 9 and next + 1 &gt; n: next //= 10 return next + 1\nBut this followup question presents a maximum length of making it impossible to do it in O(N).The idea to solve this problem is to look at how the numbers are arranged in 2D, below drawing shows a careful observation for a given range.N = 1301102100311We see an binary tree structure that is being followed here, we only need to figure out a way to traverse to the branch which has our kth number.To get the subtree for each number we append the digits to the number. Let's analyse the number of elements in each level of this tree.Clearly for getting the lexicographical order we need to perform preorder traversal of this tree.\nIt will be beneficial to identify which level will given number fall in:Say N = 13, the leftmost leaf will be 10","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":["?query=tag:trees","?query=tag:hard"],"author":"","coverImageURL":"","fullURL":"problems/leetcode/440-kth-lexicographically-smallest-number.html","pathToRoot":"../..","attachments":[],"createdTime":1750879262851,"modifiedTime":1751482451697,"sourceSize":1466,"sourcePath":"Problems/Leetcode/440 Kth lexicographically smallest number.md","exportPath":"problems/leetcode/440-kth-lexicographically-smallest-number.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"problems/leetcode/divisor-game.html":{"title":"Divisor Game","icon":"","description":"<a href=\".?query=tag:math\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#math\">#math</a> <a href=\".?query=tag:dynamic_programming\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#dynamic_programming\">#dynamic_programming</a> <a href=\".?query=tag:1D_dp\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#1D_dp\">#1D_dp</a>Alice and Bob take turns playing a game, with Alice starting first.Initially, there is a number&nbsp;n&nbsp;on the chalkboard. On each player's turn, that player makes a move consisting of:\nChoosing any&nbsp;x&nbsp;with&nbsp;0 &lt; x &lt; n&nbsp;and&nbsp;n % x == 0.\nReplacing the number&nbsp;n&nbsp;on the chalkboard with&nbsp;n - x.\nAlso, if a player cannot make a move, they lose the game.Return&nbsp;true&nbsp;if and only if Alice wins the game, assuming both players play optimally.Example 1:Input: n = 2\nOutput: true\nExplanation: Alice chooses 1, and Bob has no more moves.Example 2:Input: n = 3\nOutput: false\nExplanation: Alice chooses 1, Bob chooses 1, and Alice has no more moves.Constraints:\n1 &lt;= n &lt;= 1000\nit can be easily solved by observing the even odd relation to the winner, the one who gets an odd number loses always since there is no divisors in the range (0, 1). Anyone who gets even can give the other person odd by choosing 1 and force them to lose. So even is winner always.Let's say dp[i] = true when a players wins and 0 if they lose, then for any number n if there exists an x such that n%x == 0 and it is the losing position for the other player if we can win. Since Alice gets the first pick for every n (DP n varies) she will try to find such index where she can move the game where dp[i] is false so that Bob goes and loses from that point. Now It is just a matter of checking all factors and the losing positions for Bob in that those. class Solution: def divisorGame(self, n: int) -&gt; bool: if n == 1: return False # base case dp = [0]*(n + 1) dp[2] = True # base case for i in range(3, n + 1): j = 1 while j*j &lt; i: # factors can only lie upto sqrt(n) if i%j == 0 and dp[i - j] == 0: dp[i] = 1; break j += 1 return dp[n]\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Problem Statement","level":1,"id":"Problem_Statement_0"},{"heading":"Approach","level":1,"id":"Approach_0"},{"heading":"DP Approach","level":2,"id":"DP_Approach_0"}],"links":["?query=tag:math","?query=tag:dynamic_programming","?query=tag:1D_dp"],"author":"","coverImageURL":"","fullURL":"problems/leetcode/divisor-game.html","pathToRoot":"../..","attachments":[],"createdTime":1750879262851,"modifiedTime":1751482451928,"sourceSize":2006,"sourcePath":"Problems/Leetcode/Divisor Game.md","exportPath":"problems/leetcode/divisor-game.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"problems/leetcode/is-graph-bipartite.html":{"title":"Is Graph Bipartite","icon":"","description":"<a href=\".?query=tag:graphs\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#graphs\">#graphs</a> <a href=\".?query=tag:cycle_detection\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#cycle_detection\">#cycle_detection</a>There is an&nbsp;undirected&nbsp;graph with&nbsp;n&nbsp;nodes, where each node is numbered between&nbsp;0&nbsp;and&nbsp;n - 1. You are given a 2D array&nbsp;graph, where&nbsp;graph[u]&nbsp;is an array of nodes that node&nbsp;u&nbsp;is adjacent to. More formally, for each&nbsp;v&nbsp;in&nbsp;graph[u], there is an undirected edge between node&nbsp;u&nbsp;and node&nbsp;v. The graph has the following properties:\nThere are no self-edges (graph[u]&nbsp;does not contain&nbsp;u).\nThere are no parallel edges (graph[u]&nbsp;does not contain duplicate values).\nIf&nbsp;v&nbsp;is in&nbsp;graph[u], then&nbsp;u&nbsp;is in&nbsp;graph[v]&nbsp;(the graph is undirected).\nThe graph may not be connected, meaning there may be two nodes&nbsp;u&nbsp;and&nbsp;v&nbsp;such that there is no path between them.\nA graph is&nbsp;bipartite&nbsp;if the nodes can be partitioned into two independent sets&nbsp;A&nbsp;and&nbsp;B&nbsp;such that&nbsp;every&nbsp;edge in the graph connects a node in set&nbsp;A&nbsp;and a node in set&nbsp;B.Return&nbsp;true&nbsp;if and only if it is&nbsp;bipartite.Example 1:<br><img src=\"https://assets.leetcode.com/uploads/2020/10/21/bi2.jpg\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\">Input: graph = [[1,2,3],[0,2],[0,1,3],[0,2]]\nOutput: false\nExplanation: There is no way to partition the nodes into two independent sets such that every edge connects a node in one and a node in the other.Example 2:<br><img src=\"https://assets.leetcode.com/uploads/2020/10/21/bi1.jpg\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\">Input: graph = [[1,3],[0,2],[1,3],[0,2]]\nOutput: true\nExplanation: We can partition the nodes into two sets: {0, 2} and {1, 3}.Constraints:\ngraph.length == n\n1 &lt;= n &lt;= 100\n0 &lt;= graph[u].length &lt; n\n0 &lt;= graph[u][i] &lt;= n - 1\ngraph[u]&nbsp;does not contain&nbsp;u.\nAll the values of&nbsp;graph[u]&nbsp;are&nbsp;unique.\nIf&nbsp;graph[u]&nbsp;contains&nbsp;v, then&nbsp;graph[v]&nbsp;contains&nbsp;u.\nThis problem is just a cycle detection problem for undirected graphs.<br>\nCheck out <a data-href=\"Graphs\" href=\"graphs/graphs.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Graphs</a> for reading about bipartite graphs.\nAny algorithm can be used.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Problem statement","level":1,"id":"Problem_statement_0"},{"heading":"Approach","level":2,"id":"Approach_0"}],"links":["?query=tag:graphs","?query=tag:cycle_detection","graphs/graphs.html#_0"],"author":"","coverImageURL":"","fullURL":"problems/leetcode/is-graph-bipartite.html","pathToRoot":"../..","attachments":[],"createdTime":1750879262851,"modifiedTime":1751482452275,"sourceSize":1967,"sourcePath":"Problems/Leetcode/Is Graph Bipartite.md","exportPath":"problems/leetcode/is-graph-bipartite.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"problems/leetcode/leetcode.html":{"title":"Leetcode","icon":"","description":"\n<a class=\"internal-link\" data-href=\"Problems/Leetcode/440 Kth lexicographically smallest number.md\" href=\"problems/leetcode/440-kth-lexicographically-smallest-number.html#_0\" target=\"_self\" rel=\"noopener nofollow\">440 Kth lexicographically smallest number</a>\n<br><a class=\"internal-link\" data-href=\"Problems/Leetcode/Divisor Game.md\" href=\"problems/leetcode/divisor-game.html#_0\" target=\"_self\" rel=\"noopener nofollow\">Divisor Game</a> <br><a class=\"internal-link\" data-href=\"Problems/Leetcode/Divisor Game.md#Problem Statement\" href=\"problems/leetcode/divisor-game.html#Problem_Statement_0\" target=\"_self\" rel=\"noopener nofollow\">Problem Statement</a>\n<br><a class=\"internal-link\" data-href=\"Problems/Leetcode/Divisor Game.md#Approach\" href=\"problems/leetcode/divisor-game.html#Approach_0\" target=\"_self\" rel=\"noopener nofollow\">Approach</a> <br><a class=\"internal-link\" data-href=\"Problems/Leetcode/Divisor Game.md#Approach#DP Approach\" href=\"problems/leetcode/divisor-game.html#Approach_0\" target=\"_self\" rel=\"noopener nofollow\">DP Approach</a> <br><a class=\"internal-link\" data-href=\"Problems/Leetcode/Is Graph Bipartite.md\" href=\"problems/leetcode/is-graph-bipartite.html#_0\" target=\"_self\" rel=\"noopener nofollow\">Is Graph Bipartite</a> <br><a class=\"internal-link\" data-href=\"Problems/Leetcode/Is Graph Bipartite.md#Problem statement\" href=\"problems/leetcode/is-graph-bipartite.html#Problem_statement_0\" target=\"_self\" rel=\"noopener nofollow\">Problem statement</a> <br><a class=\"internal-link\" data-href=\"Problems/Leetcode/Is Graph Bipartite.md#Problem statement#Approach\" href=\"problems/leetcode/is-graph-bipartite.html#Problem_statement_0\" target=\"_self\" rel=\"noopener nofollow\">Approach</a> <br><a class=\"internal-link\" data-href=\"Problems/Leetcode/Miscellaneous.md\" href=\"problems/leetcode/miscellaneous.html#_0\" target=\"_self\" rel=\"noopener nofollow\">Miscellaneous</a>\n<br><a class=\"internal-link\" data-href=\"Problems/Leetcode/Nth Digit.md\" href=\"problems/leetcode/nth-digit.html#_0\" target=\"_self\" rel=\"noopener nofollow\">Nth Digit</a> <br><a class=\"internal-link\" data-href=\"Problems/Leetcode/Nth Digit.md#Approach\" href=\"problems/leetcode/nth-digit.html#Approach_0\" target=\"_self\" rel=\"noopener nofollow\">Approach</a> <br><a class=\"internal-link\" data-href=\"Problems/Leetcode/Path Sum 3.md\" href=\"problems/leetcode/path-sum-3.html#_0\" target=\"_self\" rel=\"noopener nofollow\">Path Sum 3</a> <br><a class=\"internal-link\" data-href=\"Problems/Leetcode/Path Sum 3.md#Approach\" href=\"problems/leetcode/path-sum-3.html#Approach_0\" target=\"_self\" rel=\"noopener nofollow\">Approach</a> ","aliases":[],"inlineTags":[],"frontmatterTags":["#MOCs"],"headers":[],"links":["problems/leetcode/440-kth-lexicographically-smallest-number.html#_0","problems/leetcode/divisor-game.html#_0","problems/leetcode/divisor-game.html#Problem_Statement_0","problems/leetcode/divisor-game.html#Approach_0","problems/leetcode/divisor-game.html#Approach_0","problems/leetcode/is-graph-bipartite.html#_0","problems/leetcode/is-graph-bipartite.html#Problem_statement_0","problems/leetcode/is-graph-bipartite.html#Problem_statement_0","problems/leetcode/miscellaneous.html#_0","problems/leetcode/nth-digit.html#_0","problems/leetcode/nth-digit.html#Approach_0","problems/leetcode/path-sum-3.html#_0","problems/leetcode/path-sum-3.html#Approach_0"],"author":"","coverImageURL":"","fullURL":"problems/leetcode/leetcode.html","pathToRoot":"../..","attachments":[],"createdTime":1751483718754,"modifiedTime":1751483718769,"sourceSize":46,"sourcePath":"Problems/Leetcode/Leetcode.md","exportPath":"problems/leetcode/leetcode.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"problems/leetcode/miscellaneous.html":{"title":"Miscellaneous","icon":"","description":"Given a&nbsp;square&nbsp;matrix&nbsp;mat, return the sum of the matrix diagonals.Only include the sum of all the elements on the primary diagonal and all the elements on the secondary diagonal that are not part of the primary diagonal.Example 1:<img src=\"https://assets.leetcode.com/uploads/2020/08/14/sample_1911.png\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\">Given the&nbsp;root&nbsp;of a binary tree, invert the tree, and return&nbsp;its root.Example 1:<br><img src=\"https://assets.leetcode.com/uploads/2021/03/14/invert1-tree.jpg\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\">Input: root = [4,2,7,1,3,6,9]\nOutput: [4,7,2,9,6,3,1]Example 2:<br><img src=\"https://assets.leetcode.com/uploads/2021/03/14/invert2-tree.jpg\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\">Input: root = [2,1,3]\nOutput: [2,3,1]Given an array of integers&nbsp;temperatures&nbsp;represents the daily temperatures, return&nbsp;an array&nbsp;answer&nbsp;such that&nbsp;answer[i]&nbsp;is the number of days you have to wait after the&nbsp;ith&nbsp;day to get a warmer temperature. If there is no future day for which this is possible, keep&nbsp;answer[i] == 0&nbsp;instead.Example 1:Input: temperatures = [73,74,75,71,69,72,76,73]\nOutput: [1,1,4,2,1,1,0,0]","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":"","fullURL":"problems/leetcode/miscellaneous.html","pathToRoot":"../..","attachments":[],"createdTime":1750879262852,"modifiedTime":1751482452918,"sourceSize":1094,"sourcePath":"Problems/Leetcode/Miscellaneous.md","exportPath":"problems/leetcode/miscellaneous.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"problems/leetcode/nth-digit.html":{"title":"Nth Digit","icon":"","description":"Given an infinite sequence of integers return the nth digit of the sequence.\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12...\nfrom 1 to 9 the n itself is the digit but the 10th digit is 1 and 11th digit is 0 1-0 and 12th digit is again 1 and so on.There is one careful observation to be made here about the number of x digit numbers present in the sequenceNumber of 1 digit numbers = 9 {1 to 9}\nNumber of 2 digit numbers = 90 {10 to 99}\nNumber of 3 digit numbers = 900 {100 to 999}\n.\n.\n.\nNumber of x digit numbers = 9 * (10 ^ (x - 1)) {10 ^ (x - 1) to 10 ^ x - 1}\nclass Solution: def findNthDigit(self, n: int) -&gt; int: if n &lt; 10: return n n -= 1 # convert to 0 based index digit_length = 1 start = 1 while n &gt;= 9 * digit_length * start: n -= 9 * digit_length * start digit_length += 1 start *= 10 num = start + n // digit_length digit_index = n % digit_length return int(str(num)[digit_index])\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Approach","level":1,"id":"Approach_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"problems/leetcode/nth-digit.html","pathToRoot":"../..","attachments":[],"createdTime":1750879262852,"modifiedTime":1751482453046,"sourceSize":1116,"sourcePath":"Problems/Leetcode/Nth Digit.md","exportPath":"problems/leetcode/nth-digit.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"problems/leetcode/path-sum-3.html":{"title":"Path Sum 3","icon":"","description":"<a href=\".?query=tag:binary-tree\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#binary-tree\">#binary-tree</a> <a href=\".?query=tag:prefix-sum\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#prefix-sum\">#prefix-sum</a>\nGiven the&nbsp;root&nbsp;of a binary tree and an integer&nbsp;targetSum, return&nbsp;the number of paths where the sum of the values&nbsp;along the path equals&nbsp;targetSum.The path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).Example 1:<br><img src=\"https://assets.leetcode.com/uploads/2021/04/09/pathsum3-1-tree.jpg\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\">Input: root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8\nOutput: 3\nExplanation: The paths that sum to 8 are shown.Example 2:Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\nOutput: 3Constraints:\nThe number of nodes in the tree is in the range&nbsp;[0, 1000].\n-109 &lt;= Node.val &lt;= 109\n-1000 &lt;= targetSum &lt;= 1000\nThe logic is to use a prefix sum frequency map, that tracks the number of times we have found\n10-10105tqrget = 5path sum = 15, need to remove 10can remove this 10 so 3 nodes make the pathcan remove this 10 as well so path wilk be just 5\na particular running sum, for each currSum we need to remove some part to make it equal to targetSum.currSum - x = targetSum =&gt; x = currSum - targetSum the frequency map tells us how many times this has occurred in the particular branch.The initial value is {0, 1} because an empty tree has 0 sum.class Solution: def pathSum(self, root: Optional[TreeNode], targetSum: int, currSum = 0, prefixSum = defaultdict(int, [(0, 1)]) )-&gt; int: if root is None: return 0 currSum += root.val count = prefixSum[currSum - targetSum] # branch sum, you reached upto current branch so your sum in currSum you try to subtract a previous branch that is how many times you can get that exact subtraction value prefixSum[currSum] += 1 count += self.pathSum(root.left, targetSum, currSum, prefixSum) + \\ self.pathSum(root.right, targetSum, currSum, prefixSum) prefixSum[currSum] -= 1 # Backtrack to avoid affecting other paths return count\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Approach","level":1,"id":"Approach_0"}],"links":["?query=tag:binary-tree","?query=tag:prefix-sum"],"author":"","coverImageURL":"","fullURL":"problems/leetcode/path-sum-3.html","pathToRoot":"../..","attachments":[],"createdTime":1750879262852,"modifiedTime":1751482453280,"sourceSize":2043,"sourcePath":"Problems/Leetcode/Path Sum 3.md","exportPath":"problems/leetcode/path-sum-3.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"problems/problems.html":{"title":"Problems","icon":"","description":"\n<a class=\"internal-link\" data-href=\"Problems/GFG/GFG.md\" href=\"problems/gfg/gfg.html#_0\" target=\"_self\" rel=\"noopener nofollow\"><strong><em></em></strong></a>GFG <br><a class=\"internal-link\" data-href=\"Problems/GFG/Alien Dictionary.md\" href=\"problems/gfg/alien-dictionary.html#_0\" target=\"_self\" rel=\"noopener nofollow\">Alien Dictionary</a> <br><a class=\"internal-link\" data-href=\"Problems/GFG/Alien Dictionary.md#Problem Statement\" href=\"problems/gfg/alien-dictionary.html#Problem_Statement_0\" target=\"_self\" rel=\"noopener nofollow\">Problem Statement</a>\n<br><a class=\"internal-link\" data-href=\"Problems/GFG/Alien Dictionary.md#Approach\" href=\"problems/gfg/alien-dictionary.html#Approach_0\" target=\"_self\" rel=\"noopener nofollow\">Approach</a> <br><a class=\"internal-link\" data-href=\"Problems/GFG/Alien Dictionary.md#Approach#Solution\" href=\"problems/gfg/alien-dictionary.html#Approach_0\" target=\"_self\" rel=\"noopener nofollow\">Solution</a> <br><a class=\"internal-link\" data-href=\"Problems/GFG/Flood fill algorithm.md\" href=\"problems/gfg/flood-fill-algorithm.html#_0\" target=\"_self\" rel=\"noopener nofollow\">Flood fill algorithm</a> <br><a class=\"internal-link\" data-href=\"Problems/GFG/Flood fill algorithm.md#Problem Statement\" href=\"problems/gfg/flood-fill-algorithm.html#Problem_Statement_0\" target=\"_self\" rel=\"noopener nofollow\">Problem Statement</a>\n<br><a class=\"internal-link\" data-href=\"Problems/GFG/Flood fill algorithm.md#Approach\" href=\"problems/gfg/flood-fill-algorithm.html#Approach_0\" target=\"_self\" rel=\"noopener nofollow\">Approach</a>\n<br><a class=\"internal-link\" data-href=\"Problems/GFG/Flood fill algorithm.md#Solution\" href=\"problems/gfg/flood-fill-algorithm.html#Solution_0\" target=\"_self\" rel=\"noopener nofollow\">Solution</a> <br><a class=\"internal-link\" data-href=\"Problems/Leetcode/Leetcode.md\" href=\"problems/leetcode/leetcode.html#_0\" target=\"_self\" rel=\"noopener nofollow\"><strong><em></em></strong></a>Leetcode <br><a class=\"internal-link\" data-href=\"Problems/Leetcode/440 Kth lexicographically smallest number.md\" href=\"problems/leetcode/440-kth-lexicographically-smallest-number.html#_0\" target=\"_self\" rel=\"noopener nofollow\">440 Kth lexicographically smallest number</a>\n<br><a class=\"internal-link\" data-href=\"Problems/Leetcode/Divisor Game.md\" href=\"problems/leetcode/divisor-game.html#_0\" target=\"_self\" rel=\"noopener nofollow\">Divisor Game</a> <br><a class=\"internal-link\" data-href=\"Problems/Leetcode/Divisor Game.md#Problem Statement\" href=\"problems/leetcode/divisor-game.html#Problem_Statement_0\" target=\"_self\" rel=\"noopener nofollow\">Problem Statement</a>\n<br><a class=\"internal-link\" data-href=\"Problems/Leetcode/Divisor Game.md#Approach\" href=\"problems/leetcode/divisor-game.html#Approach_0\" target=\"_self\" rel=\"noopener nofollow\">Approach</a> <br><a class=\"internal-link\" data-href=\"Problems/Leetcode/Divisor Game.md#Approach#DP Approach\" href=\"problems/leetcode/divisor-game.html#Approach_0\" target=\"_self\" rel=\"noopener nofollow\">DP Approach</a> <br><a class=\"internal-link\" data-href=\"Problems/Leetcode/Is Graph Bipartite.md\" href=\"problems/leetcode/is-graph-bipartite.html#_0\" target=\"_self\" rel=\"noopener nofollow\">Is Graph Bipartite</a> <br><a class=\"internal-link\" data-href=\"Problems/Leetcode/Is Graph Bipartite.md#Problem statement\" href=\"problems/leetcode/is-graph-bipartite.html#Problem_statement_0\" target=\"_self\" rel=\"noopener nofollow\">Problem statement</a> <br><a class=\"internal-link\" data-href=\"Problems/Leetcode/Is Graph Bipartite.md#Problem statement#Approach\" href=\"problems/leetcode/is-graph-bipartite.html#Problem_statement_0\" target=\"_self\" rel=\"noopener nofollow\">Approach</a> <br><a class=\"internal-link\" data-href=\"Problems/Leetcode/Miscellaneous.md\" href=\"problems/leetcode/miscellaneous.html#_0\" target=\"_self\" rel=\"noopener nofollow\">Miscellaneous</a>\n<br><a class=\"internal-link\" data-href=\"Problems/Leetcode/Nth Digit.md\" href=\"problems/leetcode/nth-digit.html#_0\" target=\"_self\" rel=\"noopener nofollow\">Nth Digit</a> <br><a class=\"internal-link\" data-href=\"Problems/Leetcode/Nth Digit.md#Approach\" href=\"problems/leetcode/nth-digit.html#Approach_0\" target=\"_self\" rel=\"noopener nofollow\">Approach</a> <br><a class=\"internal-link\" data-href=\"Problems/Leetcode/Path Sum 3.md\" href=\"problems/leetcode/path-sum-3.html#_0\" target=\"_self\" rel=\"noopener nofollow\">Path Sum 3</a> <br><a class=\"internal-link\" data-href=\"Problems/Leetcode/Path Sum 3.md#Approach\" href=\"problems/leetcode/path-sum-3.html#Approach_0\" target=\"_self\" rel=\"noopener nofollow\">Approach</a> ","aliases":[],"inlineTags":[],"frontmatterTags":["#MOCs"],"headers":[],"links":["problems/gfg/gfg.html#_0","problems/gfg/alien-dictionary.html#_0","problems/gfg/alien-dictionary.html#Problem_Statement_0","problems/gfg/alien-dictionary.html#Approach_0","problems/gfg/alien-dictionary.html#Approach_0","problems/gfg/flood-fill-algorithm.html#_0","problems/gfg/flood-fill-algorithm.html#Problem_Statement_0","problems/gfg/flood-fill-algorithm.html#Approach_0","problems/gfg/flood-fill-algorithm.html#Solution_0","problems/leetcode/leetcode.html#_0","problems/leetcode/440-kth-lexicographically-smallest-number.html#_0","problems/leetcode/divisor-game.html#_0","problems/leetcode/divisor-game.html#Problem_Statement_0","problems/leetcode/divisor-game.html#Approach_0","problems/leetcode/divisor-game.html#Approach_0","problems/leetcode/is-graph-bipartite.html#_0","problems/leetcode/is-graph-bipartite.html#Problem_statement_0","problems/leetcode/is-graph-bipartite.html#Problem_statement_0","problems/leetcode/miscellaneous.html#_0","problems/leetcode/nth-digit.html#_0","problems/leetcode/nth-digit.html#Approach_0","problems/leetcode/path-sum-3.html#_0","problems/leetcode/path-sum-3.html#Approach_0"],"author":"","coverImageURL":"","fullURL":"problems/problems.html","pathToRoot":"..","attachments":[],"createdTime":1751483716257,"modifiedTime":1751483716257,"sourceSize":46,"sourcePath":"Problems/Problems.md","exportPath":"problems/problems.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"queues/queues.html":{"title":"Queues","icon":"","description":"A queue is a FIFO data structure (First in First Out) The element which is inserted first is removed first.Have you stood in the line for getting something? The person at the front of the queue, gets things done first and comes out of the queue. If any new person wants to join they must do so at the back of the queue (unless they are total jerks and cut into the queue).\nbelow is the implementation of a queue in python.I mean there are overflow and underflow conditions in a fixed size queue well the below one is dynamic implementation which is used just about everywhere. I am using arrays, but something like a linked list would be way more efficient.class queue: def __init__(self): self.base = [] def __len__(self): return len(self.base) def front(self): if self.base: return self.base[0] else: raise IndexError(\"Underflow, Queue is empty\") def push(self, val): self.base.append(val) def pop(self): if self.base: return self.base.pop(0) else: raise IndexError(\"Underflow, Queue is empty\")\nCPP comes with STL queues so use them whenever needed.Quick note on try catch and except/throw(cpp). throw is used for throwing errors in code if something is wrong, try and catch are just wrappers that handle the error, you try a piece of code if there is the problem a nicely written code should throw some error which is detected by the catch block and then passed on to the catch block. And then their is finally which gets executed anyways.There are also doubly ended queues called deques which can serve both the purpose of deque and stack.I hate this from the bottom of my heart. I always write shitty code for this, here is a clean one for you tho.Important Logic, rear and front are going to always loop around if they go out of range.Drawing 2023-08-31 21.48.45.excalidraw<img class=\"emoji is-unresolved\" draggable=\"false\" alt=\"⚠\" src=\"https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/26a0.svg\" height=\"14px\" target=\"_self\" style=\"max-width: 100%;\"> Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. <img class=\"emoji is-unresolved\" draggable=\"false\" alt=\"⚠\" src=\"https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/26a0.svg\" height=\"14px\" target=\"_self\" style=\"max-width: 100%;\">capacity = 4 front == rear = -1 0 1 2 3 11 class MyCircularQueue: def __init__(self, k: int): self.capacity = k self.queue = [0] * k self.front = self.rear = -1 def enQueue(self, value: int) -&gt; bool: if self.isFull(): return False if self.isEmpty(): self.front = self.rear = 0 else: self.rear = (self.rear + 1) % self.capacity self.queue[self.rear] = value return True def deQueue(self) -&gt; bool: if self.isEmpty(): return False if self.front == self.rear: self.front = self.rear = -1 else: self.front = (self.front + 1) % self.capacity return True def Front(self) -&gt; int: if self.isEmpty(): return -1 return self.queue[self.front] def Rear(self) -&gt; int: if self.isEmpty(): return -1 return self.queue[self.rear] def isEmpty(self) -&gt; bool: return self.front == -1 def isFull(self) -&gt; bool: return (self.rear + 1) % self.capacity == self.front <br>Read More about heap queues <a data-href=\"Heaps\" href=\"heaps/heaps.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Heaps</a>","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Circular Queues","level":2,"id":"Circular_Queues_0"},{"heading":"Text Elements","level":1,"id":"Text_Elements_0"}],"links":["heaps/heaps.html#_0"],"author":"","coverImageURL":"","fullURL":"queues/queues.html","pathToRoot":"..","attachments":["_excalidraw/drawing-2023-08-31-21.48.45.excalidraw.md"],"createdTime":1750879262853,"modifiedTime":1751482453718,"sourceSize":3030,"sourcePath":"Queues/Queues.md","exportPath":"queues/queues.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"stacks/stacks.html":{"title":"Stacks","icon":"","description":"A stack is a LIFO data structure (Last in first out). It means the element that is added last is taken out first, like a stack of plates at a wedding buffet.Below is the implementation of a stack in C#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\n#include&lt;stdlib.h&gt;\nstruct stack { int size, top; int *base;\n};\nstruct stack *new_stack(int n){ struct stack* st = malloc(sizeof(struct stack)); st-&gt;size = n; st-&gt;top = -1; st-&gt;base = malloc(sizeof(int) * n); memset(st-&gt;base, 0, n*sizeof(int)); return st;\n}\nint top(struct stack *st){ if(st-&gt;top == -1){ printf(\"%s\", \"Underflow\"); return -1; } else if(st-&gt;top == st-&gt;size) { printf(\"%s\", \"Overflow\"); return -1; } else { return st-&gt;base[st-&gt;top]; }\n}\nint pop(struct stack *st){ if(st-&gt;top == -1){ printf(\"%s\", \"Underflow\"); return -1; } else { int top_val = st-&gt;base[st-&gt;top]; st-&gt;top--; return top_val; }\n}\nvoid push (struct stack *st, int val) { if (st-&gt;top == st-&gt;size) { printf(\"%s\", \"Overflow\"); } else { st-&gt;top++; st-&gt;base[st-&gt;top] = val; }\n}\nint main(){ int n = 10; struct stack *st = new_stack(n); top(st); push(st, 55); printf(\"%d\", top(st)); printf(\"%d\", pop(st)); top(st);\n} ","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":"","fullURL":"stacks/stacks.html","pathToRoot":"..","attachments":[],"createdTime":1750879262853,"modifiedTime":1751482453906,"sourceSize":1197,"sourcePath":"Stacks/Stacks.md","exportPath":"stacks/stacks.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"strings/kmp-algorithm.html":{"title":"KMP algorithm","icon":"","description":"Knuth Morris Pratt algorithm is used to find the first occurrence of a substring in a string in O(N + M) time.The core intuition behind this algorithm is that everytime we find a mismatch during our linear search we again go back to the substrings beginning and match it again that results in O(M*N) complexity in the worst case.We maintain an LPS (Longest prefix suffix) array. For each index i in the substring the LPS stores how many characters match from the beginning. In other words it is the longest prefix that is a suffix of the substring of the substring ending at that index.a b c d a b c a This helps us avoid the repeated going back and only go back the necessary amount. suppose we have matched till the second b then we go back only two characters and match from c now because a and b are already matched.# KMP\ndef createLPS(substring): M = len(substring) lps = [0] * M j, i = 0, 1 while i &lt; M: if substring[i] != substring[j]: j -= lps[i - 1] if substring[i] == substring[j]: lps[i] = j + 1 j += 1 i += 1 return lps\nThe algorithm is as follows:\nStart matching normally using two pointers, everytime there is a mismatch instead of resetting the substring pointer to 0, set it to lps[j - 1]def find(st, sub, lps): M, N = len(sub), len(st) i, j = 0, 0 while i &lt; N: if st[i] == sub[j]: i += 1; j += 1 if j == M: return i - j else: if j != 0: j = lps[j - 1] else: i += 1 return -1\nLeetcode: Smallest prefix to make given string palindromic.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"LPS Array","level":2,"id":"LPS_Array_0"},{"heading":"Algorithm","level":2,"id":"Algorithm_0"},{"heading":"Related problems","level":2,"id":"Related_problems_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"strings/kmp-algorithm.html","pathToRoot":"..","attachments":[],"createdTime":1750879262854,"modifiedTime":1750879441090,"sourceSize":1613,"sourcePath":"Strings/KMP algorithm.md","exportPath":"strings/kmp-algorithm.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"strings/strings.html":{"title":"Strings","icon":"","description":"\n<a class=\"internal-link\" data-href=\"Strings/KMP algorithm.md\" href=\"strings/kmp-algorithm.html#_0\" target=\"_self\" rel=\"noopener nofollow\">KMP algorithm</a>\n","aliases":[],"inlineTags":[],"frontmatterTags":["#MOCs"],"headers":[],"links":["strings/kmp-algorithm.html#_0"],"author":"","coverImageURL":"","fullURL":"strings/strings.html","pathToRoot":"..","attachments":[],"createdTime":1751483722871,"modifiedTime":1751483722871,"sourceSize":46,"sourcePath":"Strings/Strings.md","exportPath":"strings/strings.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"trees/avl-trees.html":{"title":"AVL Trees","icon":"","description":"Named after Adelson, Velsky and Landis. AVL Trees are height balanced binary search trees. These are in the same criteria <a data-href=\"Red and Black Trees\" href=\"trees/red-and-black-trees.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Red and Black Trees</a> and are used for maintaining a sorted collection with efficient insertion, deletion and search.\nThey have more rigid balancing criteria than RBTs and are used when operation times need to be strict. The caveat is that they require larger number of rotations while insertion compared to RBTs.\nThis balancing is decided by balance factor.\nFor a balanced BST, the following is true for each node.\n<br>Simply perform the <a data-href=\"Insertion in a BST\" href=\".html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Insertion in a BST</a>. This may create imbalance on some of the nodes. See the diagram below:Drawing 2023-10-01 22.04.16.excalidrawDepending upon the node at which imbalance is caused and the place where the new node is inserted, there are 4 types of imbalances possible.LL Imbalance: Inserted node is towards immediate left and then anywhere in the left of the immediate left.\nLR Imbalance: Inserted node is toward immediate left and then anywhere in the right of the immediate left.\nRL Imbalance: The RL imbalance occurs when a node is inserted towards the immediate right child of its parent and then anywhere in the left subtree of the immediate right child.\nRR Imbalance: The RR imbalance occurs when a node is inserted towards the immediate right child of its parent and then anywhere in the right subtree of the immediate right child.\nDrawing 2023-10-01 22.21.21.excalidrawWe perform rotations to fix these imbalances. Rotation is always done on 3 nodes at a time.\nDrawing 2023-10-01 22.28.13.excalidrawAlways choose three nodes for rotations. The rotations have been shown for a large tree. The imbalance is an LL imbalance which is caused by an insertion somewhere in the C right sub (Right is still LL, I am not wrong think about it).Drawing 2023-10-01 23.12.08.excalidraw","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Insertion in AVL Tree","level":2,"id":"Insertion_in_AVL_Tree_0"},{"heading":"General Form of Rotations","level":3,"id":"General_Form_of_Rotations_0"}],"links":["trees/red-and-black-trees.html#_0",".html"],"author":"","coverImageURL":"","fullURL":"trees/avl-trees.html","pathToRoot":"..","attachments":["_excalidraw/drawing-2023-10-01-22.04.16.excalidraw.md","_excalidraw/drawing-2023-10-01-22.21.21.excalidraw.md","_excalidraw/drawing-2023-10-01-22.28.13.excalidraw.md","_excalidraw/drawing-2023-10-01-23.12.08.excalidraw.md"],"createdTime":1750879262854,"modifiedTime":1751482454961,"sourceSize":2111,"sourcePath":"Trees/AVL Trees.md","exportPath":"trees/avl-trees.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"trees/range-queries.html":{"title":"Range Queries","icon":"","description":"You are given an array of N elements and you are also given Q queries, each query has a range [l, r] and you have to find perform whatever the query is in that range in the array and return the results.Example: You have to calculate the minimum number for each query. Simply iterate from l to r and find out the minimum for each of them, the time complexity in this case is O(N*Q) which will result in TLE for large input sizes. The idea is to utilize a complete binary tree based data structure for storing the symmetric range queries and then calculating the values from the tree. A node has the following attributes.struct segTreeNode{ int result, index; // result of the query operation for curr range pair&lt;int, int&gt; range; segTreeNode *left, *right;\n}\nSince this is a complete binary tree, it is beneficial for us to store it in an array.vector&lt;int&gt; segTree(4*N);\nFor an array of N elements it has been mathematically proven that a segment tree of 4N nodes is enough.\nIn a zero indexed segment tree the root node has the index 0, like heaps the following applies:leftChild = 2*i + 1\nrightChild = 2*i + 2\nThe root carries the answer for the whole range [0, N-1] and then we keep splitting the ranges in half for the left and right children.\nDrawing 2023-09-13 15.28.51.excalidraw<img class=\"emoji is-unresolved\" draggable=\"false\" alt=\"⚠\" src=\"https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/26a0.svg\" height=\"14px\" target=\"_self\" style=\"max-width: 100%;\"> Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. <img class=\"emoji is-unresolved\" draggable=\"false\" alt=\"⚠\" src=\"https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/26a0.svg\" height=\"14px\" target=\"_self\" style=\"max-width: 100%;\">1 5 2 0 3 4 0 1 2 3 4 5 [3, 5] 2 [0, 5] 0 [5, 5] 6 [0, 2] 1 [4, 4] 13 Above picture gives a representation of a segment tree.Below is the code for building the segment tree.There are three rules to remember for calculating the results.\nGiven a query [low, high] we start from the root node. The following cases are possible:\nCase 1: No overlap In this case the range of the current node does not overlap with the query in this case return an answer that does not affect the outcome. For example: for minimum value you may return infinity and for the sum problem you should return 0.\nCase 2: Full Overlap In this case the range of the current node is the same as the query range, just return the value stored in the node.\nCase 3: Partial Overlap In this case the range of the current node partially overlaps with the given range, partial means some part lies in and some part lies out. In this case you call the query for the left and right child and combine the results.\nBelow is the code for finding the minimum value queries.Sometimes you may need to change the value of a certain index i of the array, instead of building the entire tree again we can use a point update algorithm to do it.1. Start from the root node.\n2. Check if the current Node is a leaf node range = the index to be updated.\n3. If yes then change the answer in the tree and return it, else just return.\n4. If the node is not a leaf node check whether the node lies in left range or right child range and call update accordingly. root.val = update(root.left) if i lies in range of root.left else root.val = update(root.right)\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Brute Force Approach","level":3,"id":"Brute_Force_Approach_0"},{"heading":"Segment Tree","level":3,"id":"Segment_Tree_0"},{"heading":"Text Elements","level":1,"id":"Text_Elements_0"},{"heading":"Calculation of queries in segment Trees","level":4,"id":"Calculation_of_queries_in_segment_Trees_0"},{"heading":"Point Updates in Segment Trees","level":4,"id":"Point_Updates_in_Segment_Trees_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"trees/range-queries.html","pathToRoot":"..","attachments":["_excalidraw/drawing-2023-09-13-15.28.51.excalidraw.md"],"createdTime":1750879262855,"modifiedTime":1751482455306,"sourceSize":3081,"sourcePath":"Trees/Range Queries.md","exportPath":"trees/range-queries.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"trees/red-and-black-trees.html":{"title":"Red and Black Trees","icon":"","description":"","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":"","fullURL":"trees/red-and-black-trees.html","pathToRoot":"..","attachments":[],"createdTime":1750879262855,"modifiedTime":1750879262855,"sourceSize":0,"sourcePath":"Trees/Red and Black Trees.md","exportPath":"trees/red-and-black-trees.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"trees/trees.html":{"title":"Trees","icon":"","description":"\n<a class=\"internal-link\" data-href=\"Trees/AVL Trees.md\" href=\"trees/avl-trees.html#_0\" target=\"_self\" rel=\"noopener nofollow\">AVL Trees</a>\n<br><a class=\"internal-link\" data-href=\"Trees/Range Queries.md\" href=\"trees/range-queries.html#_0\" target=\"_self\" rel=\"noopener nofollow\">Range Queries</a>\n<br><a class=\"internal-link\" data-href=\"Trees/Red and Black Trees.md\" href=\"trees/red-and-black-trees.html#_0\" target=\"_self\" rel=\"noopener nofollow\">Red and Black Trees</a>\n","aliases":[],"inlineTags":[],"frontmatterTags":["#MOCs"],"headers":[],"links":["trees/avl-trees.html#_0","trees/range-queries.html#_0","trees/red-and-black-trees.html#_0"],"author":"","coverImageURL":"","fullURL":"trees/trees.html","pathToRoot":"..","attachments":[],"createdTime":1751483723953,"modifiedTime":1751483723954,"sourceSize":46,"sourcePath":"Trees/Trees.md","exportPath":"trees/trees.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"tries/problems.html":{"title":"Problems","icon":"","description":"","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":"","fullURL":"tries/problems.html","pathToRoot":"..","attachments":[],"createdTime":1750879262855,"modifiedTime":1750879262855,"sourceSize":0,"sourcePath":"Tries/Problems.md","exportPath":"tries/problems.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"tries/tries.html":{"title":"Tries","icon":"","description":"Tries are k-ary trees used for searching keys optimally, they are also known as radix trees/prefix trees.\nre-trie-valBelow is a Trie implementation for the english words. This is slightly different from trees for effective implementation(It has no value in itself, the alphabet added is determined by its children). Each node (block of memory) has one ore more of the 26 alphabets. And a mark attribute, that marks if a word ends at this node. So position 3 is not None, it will have a pointer to the next node of the Trie.\nRootclass TrieNode: def __init__(self): self.children = {} self.eow = False # end of word?\nclass Trie: def __init__(self): self.root = TrieNode() def insert(self, key): N = len(key) trav = self.root for ch in key: if ch not in trav.children: trav.children[ch] = TrieNode() trav = trav.children[ch] trav.eow = True def search(self, key): N = len(key) trav = self.root for i, ch in enumerate(key): if ch not in trav.children: return False trav = trav.children[ch] return trav.eow\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Implementation","level":2,"id":"Implementation_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"tries/tries.html","pathToRoot":"..","attachments":[],"createdTime":1750879262855,"modifiedTime":1751482457394,"sourceSize":1234,"sourcePath":"Tries/Tries.md","exportPath":"tries/tries.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"index.html":{"title":"index","icon":"","description":"Welcome to the Data Structure Notes. If you like my work consider subscribing to my <a data-tooltip-position=\"top\" aria-label=\"https://www.youtube.com/@Sameer.Trivedi\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.youtube.com/@Sameer.Trivedi\" target=\"_self\">Youtube Channel</a>. Feel free to utilize them however you want!<br>Happy Coding <img class=\"emoji is-unresolved\" draggable=\"false\" alt=\"😇\" src=\"https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f607.svg\" height=\"14px\" target=\"_self\" style=\"max-width: 100%;\">!!","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":"","fullURL":"index.html","pathToRoot":".","attachments":[],"createdTime":1751484319439,"modifiedTime":1751484466355,"sourceSize":212,"sourcePath":"index.md","exportPath":"index.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"}},"fileInfo":{"arrays/arrays.html":{"createdTime":1751483694106,"modifiedTime":1751483694106,"sourceSize":46,"sourcePath":"Arrays/Arrays.md","exportPath":"arrays/arrays.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"arrays/bubble-sort.html":{"createdTime":1750880933672,"modifiedTime":1750881385359,"sourceSize":466,"sourcePath":"Arrays/Bubble Sort.md","exportPath":"arrays/bubble-sort.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"arrays/selection-sort.html":{"createdTime":1750879576584,"modifiedTime":1750880925443,"sourceSize":813,"sourcePath":"Arrays/Selection Sort.md","exportPath":"arrays/selection-sort.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"graphs/breadth-first-search-(bfs).html":{"createdTime":1750879262832,"modifiedTime":1751482405232,"sourceSize":3615,"sourcePath":"Graphs/Breadth First Search (BFS).md","exportPath":"graphs/breadth-first-search-(bfs).html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"graphs/cycle-detection.html":{"createdTime":1750879262832,"modifiedTime":1751482405889,"sourceSize":6343,"sourcePath":"Graphs/Cycle Detection.md","exportPath":"graphs/cycle-detection.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"graphs/depth-first-search-(dfs).html":{"createdTime":1750879262833,"modifiedTime":1751482406198,"sourceSize":2638,"sourcePath":"Graphs/Depth First Search (DFS).md","exportPath":"graphs/depth-first-search-(dfs).html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"graphs/disjoint-set-union(dsu).html":{"createdTime":1750879262833,"modifiedTime":1751482406682,"sourceSize":4195,"sourcePath":"Graphs/Disjoint Set Union(DSU).md","exportPath":"graphs/disjoint-set-union(dsu).html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"graphs/graphs.html":{"createdTime":1750879262834,"modifiedTime":1751482407382,"sourceSize":4206,"sourcePath":"Graphs/Graphs.md","exportPath":"graphs/graphs.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"graphs/minimum-spanning-trees-(mst).html":{"createdTime":1750879262834,"modifiedTime":1751482407873,"sourceSize":5730,"sourcePath":"Graphs/Minimum Spanning Trees (MST).md","exportPath":"graphs/minimum-spanning-trees-(mst).html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"graphs/problems.html":{"createdTime":1750879262835,"modifiedTime":1751482407943,"sourceSize":68,"sourcePath":"Graphs/Problems.md","exportPath":"graphs/problems.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"graphs/representation-of-graphs.html":{"createdTime":1750879262835,"modifiedTime":1751482408241,"sourceSize":3414,"sourcePath":"Graphs/Representation of Graphs.md","exportPath":"graphs/representation-of-graphs.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"graphs/shortest-path-problem.html":{"createdTime":1750879262835,"modifiedTime":1751482409353,"sourceSize":13613,"sourcePath":"Graphs/Shortest Path Problem.md","exportPath":"graphs/shortest-path-problem.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"graphs/strongly-connected-components.html":{"createdTime":1750879262835,"modifiedTime":1750879262835,"sourceSize":0,"sourcePath":"Graphs/Strongly Connected Components.md","exportPath":"graphs/strongly-connected-components.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"graphs/topological-sort.html":{"createdTime":1750879262837,"modifiedTime":1751482448291,"sourceSize":4021,"sourcePath":"Graphs/Topological Sort.md","exportPath":"graphs/topological-sort.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"heaps/heaps.html":{"createdTime":1750879262837,"modifiedTime":1751482448837,"sourceSize":7574,"sourcePath":"Heaps/Heaps.md","exportPath":"heaps/heaps.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"leetcode-contests/weekly/359/find-the-longest-equal-subarray.html":{"createdTime":1750879262838,"modifiedTime":1751482449414,"sourceSize":4377,"sourcePath":"Leetcode Contests/Weekly/359/Find the longest equal subarray.md","exportPath":"leetcode-contests/weekly/359/find-the-longest-equal-subarray.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"leetcode-contests/weekly/359/maximize-profit-as-a-salesman.html":{"createdTime":1750879262839,"modifiedTime":1751482449682,"sourceSize":3769,"sourcePath":"Leetcode Contests/Weekly/359/Maximize Profit as a Salesman.md","exportPath":"leetcode-contests/weekly/359/maximize-profit-as-a-salesman.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"leetcode-contests/leetcode-contests.html":{"createdTime":1751483703684,"modifiedTime":1751483703696,"sourceSize":46,"sourcePath":"Leetcode Contests/Leetcode Contests.md","exportPath":"leetcode-contests/leetcode-contests.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"miscellaneous/resources/04-greedy.pdf":{"createdTime":1750879262847,"modifiedTime":1750879262847,"sourceSize":1262205,"sourcePath":"Miscellaneous/Resources/04-greedy.pdf","exportPath":"miscellaneous/resources/04-greedy.pdf","showInTree":true,"treeOrder":0,"backlinks":[],"type":"other","data":null},"miscellaneous/resources/04-greedy.html":{"createdTime":1750879262847,"modifiedTime":1750879262847,"sourceSize":1262205,"sourcePath":"Miscellaneous/Resources/04-greedy.pdf","exportPath":"miscellaneous/resources/04-greedy.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"attachment","data":null},"miscellaneous/resources/roadmap-resources.pdf":{"createdTime":1750879262849,"modifiedTime":1750879262849,"sourceSize":82110,"sourcePath":"Miscellaneous/Resources/Roadmap Resources.pdf","exportPath":"miscellaneous/resources/roadmap-resources.pdf","showInTree":true,"treeOrder":0,"backlinks":[],"type":"other","data":null},"miscellaneous/resources/roadmap-resources.html":{"createdTime":1750879262849,"modifiedTime":1750879262849,"sourceSize":82110,"sourcePath":"Miscellaneous/Resources/Roadmap Resources.pdf","exportPath":"miscellaneous/resources/roadmap-resources.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"attachment","data":null},"miscellaneous/complexity-theory-(p,-np,-np-hard-and-np-complete).html":{"createdTime":1750879262839,"modifiedTime":1751482449887,"sourceSize":2201,"sourcePath":"Miscellaneous/Complexity Theory (P, NP, NP hard and NP complete).md","exportPath":"miscellaneous/complexity-theory-(p,-np,-np-hard-and-np-complete).html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"miscellaneous/galen's-guide-to-being-a-successful-competitive-programmer.html":{"createdTime":1750879262840,"modifiedTime":1751482450102,"sourceSize":4096,"sourcePath":"Miscellaneous/Galen's guide to being a successful competitive programmer.md","exportPath":"miscellaneous/galen's-guide-to-being-a-successful-competitive-programmer.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"miscellaneous/mathematical-induction.html":{"createdTime":1750879262840,"modifiedTime":1751482450812,"sourceSize":1104,"sourcePath":"Miscellaneous/Mathematical Induction.md","exportPath":"miscellaneous/mathematical-induction.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"miscellaneous/miscellaneous.html":{"createdTime":1751483713257,"modifiedTime":1751483713257,"sourceSize":46,"sourcePath":"Miscellaneous/Miscellaneous.md","exportPath":"miscellaneous/miscellaneous.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"miscellaneous/policy-based-data-structures.html":{"createdTime":1750879262840,"modifiedTime":1751482451057,"sourceSize":1853,"sourcePath":"Miscellaneous/Policy Based Data Structures.md","exportPath":"miscellaneous/policy-based-data-structures.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"problems/gfg/alien-dictionary.html":{"createdTime":1750879262850,"modifiedTime":1750879439765,"sourceSize":3303,"sourcePath":"Problems/GFG/Alien Dictionary.md","exportPath":"problems/gfg/alien-dictionary.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"problems/gfg/flood-fill-algorithm.html":{"createdTime":1750879262850,"modifiedTime":1751482451340,"sourceSize":2575,"sourcePath":"Problems/GFG/Flood fill algorithm.md","exportPath":"problems/gfg/flood-fill-algorithm.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"problems/gfg/gfg.html":{"createdTime":1751483717796,"modifiedTime":1751483717797,"sourceSize":46,"sourcePath":"Problems/GFG/GFG.md","exportPath":"problems/gfg/gfg.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"problems/leetcode/440-kth-lexicographically-smallest-number.html":{"createdTime":1750879262851,"modifiedTime":1751482451697,"sourceSize":1466,"sourcePath":"Problems/Leetcode/440 Kth lexicographically smallest number.md","exportPath":"problems/leetcode/440-kth-lexicographically-smallest-number.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"problems/leetcode/divisor-game.html":{"createdTime":1750879262851,"modifiedTime":1751482451928,"sourceSize":2006,"sourcePath":"Problems/Leetcode/Divisor Game.md","exportPath":"problems/leetcode/divisor-game.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"problems/leetcode/is-graph-bipartite.html":{"createdTime":1750879262851,"modifiedTime":1751482452275,"sourceSize":1967,"sourcePath":"Problems/Leetcode/Is Graph Bipartite.md","exportPath":"problems/leetcode/is-graph-bipartite.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"problems/leetcode/leetcode.html":{"createdTime":1751483718754,"modifiedTime":1751483718769,"sourceSize":46,"sourcePath":"Problems/Leetcode/Leetcode.md","exportPath":"problems/leetcode/leetcode.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"problems/leetcode/miscellaneous.html":{"createdTime":1750879262852,"modifiedTime":1751482452918,"sourceSize":1094,"sourcePath":"Problems/Leetcode/Miscellaneous.md","exportPath":"problems/leetcode/miscellaneous.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"problems/leetcode/nth-digit.html":{"createdTime":1750879262852,"modifiedTime":1751482453046,"sourceSize":1116,"sourcePath":"Problems/Leetcode/Nth Digit.md","exportPath":"problems/leetcode/nth-digit.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"problems/leetcode/path-sum-3.html":{"createdTime":1750879262852,"modifiedTime":1751482453280,"sourceSize":2043,"sourcePath":"Problems/Leetcode/Path Sum 3.md","exportPath":"problems/leetcode/path-sum-3.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"problems/problems.html":{"createdTime":1751483716257,"modifiedTime":1751483716257,"sourceSize":46,"sourcePath":"Problems/Problems.md","exportPath":"problems/problems.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"queues/queues.html":{"createdTime":1750879262853,"modifiedTime":1751482453718,"sourceSize":3030,"sourcePath":"Queues/Queues.md","exportPath":"queues/queues.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"stacks/stacks.html":{"createdTime":1750879262853,"modifiedTime":1751482453906,"sourceSize":1197,"sourcePath":"Stacks/Stacks.md","exportPath":"stacks/stacks.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"strings/kmp-algorithm.html":{"createdTime":1750879262854,"modifiedTime":1750879441090,"sourceSize":1613,"sourcePath":"Strings/KMP algorithm.md","exportPath":"strings/kmp-algorithm.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"strings/strings.html":{"createdTime":1751483722871,"modifiedTime":1751483722871,"sourceSize":46,"sourcePath":"Strings/Strings.md","exportPath":"strings/strings.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"trees/avl-trees.html":{"createdTime":1750879262854,"modifiedTime":1751482454961,"sourceSize":2111,"sourcePath":"Trees/AVL Trees.md","exportPath":"trees/avl-trees.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"trees/range-queries.html":{"createdTime":1750879262855,"modifiedTime":1751482455306,"sourceSize":3081,"sourcePath":"Trees/Range Queries.md","exportPath":"trees/range-queries.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"trees/red-and-black-trees.html":{"createdTime":1750879262855,"modifiedTime":1750879262855,"sourceSize":0,"sourcePath":"Trees/Red and Black Trees.md","exportPath":"trees/red-and-black-trees.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"trees/trees.html":{"createdTime":1751483723953,"modifiedTime":1751483723954,"sourceSize":46,"sourcePath":"Trees/Trees.md","exportPath":"trees/trees.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"tries/problems.html":{"createdTime":1750879262855,"modifiedTime":1750879262855,"sourceSize":0,"sourcePath":"Tries/Problems.md","exportPath":"tries/problems.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"tries/tries.html":{"createdTime":1750879262855,"modifiedTime":1751482457394,"sourceSize":1234,"sourcePath":"Tries/Tries.md","exportPath":"tries/tries.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"index.html":{"createdTime":1751484319439,"modifiedTime":1751484466355,"sourceSize":212,"sourcePath":"index.md","exportPath":"index.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"site-lib/html/custom-head-content-content.html":{"createdTime":1751871410695,"modifiedTime":1751871410695,"sourceSize":1138,"sourcePath":"","exportPath":"site-lib/html/custom-head-content-content.html","showInTree":false,"treeOrder":0,"backlinks":[],"type":"html","data":null},"site-lib/scripts/graph-wasm.wasm":{"createdTime":1751867359416,"modifiedTime":1751491271281.275,"sourceSize":23655,"sourcePath":"","exportPath":"site-lib/scripts/graph-wasm.wasm","showInTree":false,"treeOrder":0,"backlinks":[],"type":"other","data":null},"site-lib/fonts/94f2f163d4b698242fef.otf":{"createdTime":1751871410634,"modifiedTime":1751871410634,"sourceSize":66800,"sourcePath":"","exportPath":"site-lib/fonts/94f2f163d4b698242fef.otf","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/72505e6a122c6acd5471.woff2":{"createdTime":1751871410635,"modifiedTime":1751871410635,"sourceSize":104232,"sourcePath":"","exportPath":"site-lib/fonts/72505e6a122c6acd5471.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/2d5198822ab091ce4305.woff2":{"createdTime":1751871410635,"modifiedTime":1751871410635,"sourceSize":104332,"sourcePath":"","exportPath":"site-lib/fonts/2d5198822ab091ce4305.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/c8ba52b05a9ef10f4758.woff2":{"createdTime":1751871410635,"modifiedTime":1751871410635,"sourceSize":98868,"sourcePath":"","exportPath":"site-lib/fonts/c8ba52b05a9ef10f4758.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/cb10ffd7684cd9836a05.woff2":{"createdTime":1751871410636,"modifiedTime":1751871410636,"sourceSize":106876,"sourcePath":"","exportPath":"site-lib/fonts/cb10ffd7684cd9836a05.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/b5f0f109bc88052d4000.woff2":{"createdTime":1751871410636,"modifiedTime":1751871410636,"sourceSize":105804,"sourcePath":"","exportPath":"site-lib/fonts/b5f0f109bc88052d4000.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/cbe0ae49c52c920fd563.woff2":{"createdTime":1751871410636,"modifiedTime":1751871410636,"sourceSize":106108,"sourcePath":"","exportPath":"site-lib/fonts/cbe0ae49c52c920fd563.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/535a6cf662596b3bd6a6.woff2":{"createdTime":1751871410636,"modifiedTime":1751871410636,"sourceSize":111708,"sourcePath":"","exportPath":"site-lib/fonts/535a6cf662596b3bd6a6.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/70cc7ff27245e82ad414.ttf":{"createdTime":1751871410637,"modifiedTime":1751871410637,"sourceSize":192740,"sourcePath":"","exportPath":"site-lib/fonts/70cc7ff27245e82ad414.ttf","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/454577c22304619db035.ttf":{"createdTime":1751871410638,"modifiedTime":1751871410638,"sourceSize":161376,"sourcePath":"","exportPath":"site-lib/fonts/454577c22304619db035.ttf","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/52ac8f3034507f1d9e53.ttf":{"createdTime":1751871410638,"modifiedTime":1751871410638,"sourceSize":191568,"sourcePath":"","exportPath":"site-lib/fonts/52ac8f3034507f1d9e53.ttf","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/05b618077343fbbd92b7.ttf":{"createdTime":1751871410638,"modifiedTime":1751871410638,"sourceSize":155288,"sourcePath":"","exportPath":"site-lib/fonts/05b618077343fbbd92b7.ttf","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/4bb6ac751d1c5478ff3a.woff2":{"createdTime":1751871410633,"modifiedTime":1751871410633,"sourceSize":7876,"sourcePath":"","exportPath":"site-lib/fonts/4bb6ac751d1c5478ff3a.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/media/6155340132a851f6089e.svg":{"createdTime":1751871410634,"modifiedTime":1751871410634,"sourceSize":315,"sourcePath":"","exportPath":"site-lib/media/6155340132a851f6089e.svg","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"site-lib/media/2308ab1944a6bfa5c5b8.svg":{"createdTime":1751871410634,"modifiedTime":1751871410634,"sourceSize":278,"sourcePath":"","exportPath":"site-lib/media/2308ab1944a6bfa5c5b8.svg","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"site-lib/html/file-tree-content.html":{"createdTime":1751871411242,"modifiedTime":1751871411242,"sourceSize":27381,"sourcePath":"","exportPath":"site-lib/html/file-tree-content.html","showInTree":false,"treeOrder":0,"backlinks":[],"type":"html","data":null},"site-lib/scripts/webpage.js":{"createdTime":1751867360105,"modifiedTime":1751867360105,"sourceSize":101494,"sourcePath":"","exportPath":"site-lib/scripts/webpage.js","showInTree":false,"treeOrder":0,"backlinks":[],"type":"script","data":null},"site-lib/scripts/graph-wasm.js":{"createdTime":1751867360105,"modifiedTime":1751867360105,"sourceSize":12885,"sourcePath":"","exportPath":"site-lib/scripts/graph-wasm.js","showInTree":false,"treeOrder":0,"backlinks":[],"type":"script","data":null},"site-lib/scripts/graph-render-worker.js":{"createdTime":1751867360105,"modifiedTime":1751867360105,"sourceSize":5681,"sourcePath":"","exportPath":"site-lib/scripts/graph-render-worker.js","showInTree":false,"treeOrder":0,"backlinks":[],"type":"script","data":null},"site-lib/media/favicon.png":{"createdTime":1751871410502,"modifiedTime":1751871410502,"sourceSize":1105,"sourcePath":"","exportPath":"site-lib/media/favicon.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"site-lib/styles/snippets.css":{"createdTime":1751871410701,"modifiedTime":1751871410701,"sourceSize":91,"sourcePath":"","exportPath":"site-lib/styles/snippets.css","showInTree":false,"treeOrder":0,"backlinks":[],"type":"style","data":null},"site-lib/styles/obsidian.css":{"createdTime":1751871410685,"modifiedTime":1751871410685,"sourceSize":163792,"sourcePath":"","exportPath":"site-lib/styles/obsidian.css","showInTree":false,"treeOrder":0,"backlinks":[],"type":"style","data":null},"site-lib/styles/other-plugins.css":{"createdTime":1751867621697,"modifiedTime":1751867621697,"sourceSize":12640,"sourcePath":"","exportPath":"site-lib/styles/other-plugins.css","showInTree":false,"treeOrder":0,"backlinks":[],"type":"style","data":null},"site-lib/styles/theme.css":{"createdTime":1751867360789,"modifiedTime":1751867360789,"sourceSize":677676,"sourcePath":"","exportPath":"site-lib/styles/theme.css","showInTree":false,"treeOrder":0,"backlinks":[],"type":"style","data":null},"site-lib/styles/global-variable-styles.css":{"createdTime":1751871410594,"modifiedTime":1751871410594,"sourceSize":565,"sourcePath":"","exportPath":"site-lib/styles/global-variable-styles.css","showInTree":false,"treeOrder":0,"backlinks":[],"type":"style","data":null},"site-lib/styles/supported-plugins.css":{"createdTime":1751871410699,"modifiedTime":1751871410699,"sourceSize":2639,"sourcePath":"","exportPath":"site-lib/styles/supported-plugins.css","showInTree":false,"treeOrder":0,"backlinks":[],"type":"style","data":null},"site-lib/styles/main-styles.css":{"createdTime":1751867360136,"modifiedTime":1751867360136,"sourceSize":19129,"sourcePath":"","exportPath":"site-lib/styles/main-styles.css","showInTree":false,"treeOrder":0,"backlinks":[],"type":"style","data":null},"_excalidraw/drawing-2023-09-13-15.28.51.excalidraw.md":{"createdTime":1750879262827,"modifiedTime":1750879262827,"sourceSize":29343,"sourcePath":"_excalidraw/Drawing 2023-09-13 15.28.51.excalidraw.md","exportPath":"_excalidraw/drawing-2023-09-13-15.28.51.excalidraw.md","showInTree":false,"treeOrder":0,"backlinks":[],"type":"other","data":null},"_excalidraw/drawing-2023-10-01-22.04.16.excalidraw.md":{"createdTime":1750879262828,"modifiedTime":1750879262828,"sourceSize":10259,"sourcePath":"_excalidraw/Drawing 2023-10-01 22.04.16.excalidraw.md","exportPath":"_excalidraw/drawing-2023-10-01-22.04.16.excalidraw.md","showInTree":false,"treeOrder":0,"backlinks":[],"type":"other","data":null},"_excalidraw/drawing-2023-10-01-22.21.21.excalidraw.md":{"createdTime":1750879262829,"modifiedTime":1750879262829,"sourceSize":11999,"sourcePath":"_excalidraw/Drawing 2023-10-01 22.21.21.excalidraw.md","exportPath":"_excalidraw/drawing-2023-10-01-22.21.21.excalidraw.md","showInTree":false,"treeOrder":0,"backlinks":[],"type":"other","data":null},"_excalidraw/drawing-2023-10-01-22.28.13.excalidraw.md":{"createdTime":1750879262829,"modifiedTime":1750879262829,"sourceSize":25241,"sourcePath":"_excalidraw/Drawing 2023-10-01 22.28.13.excalidraw.md","exportPath":"_excalidraw/drawing-2023-10-01-22.28.13.excalidraw.md","showInTree":false,"treeOrder":0,"backlinks":[],"type":"other","data":null},"_excalidraw/drawing-2023-10-01-23.12.08.excalidraw.md":{"createdTime":1750879262830,"modifiedTime":1750879262830,"sourceSize":19484,"sourcePath":"_excalidraw/Drawing 2023-10-01 23.12.08.excalidraw.md","exportPath":"_excalidraw/drawing-2023-10-01-23.12.08.excalidraw.md","showInTree":false,"treeOrder":0,"backlinks":[],"type":"other","data":null},"_excalidraw/drawing-2023-08-31-21.48.45.excalidraw.md":{"createdTime":1750879262825,"modifiedTime":1750879262825,"sourceSize":13330,"sourcePath":"_excalidraw/Drawing 2023-08-31 21.48.45.excalidraw.md","exportPath":"_excalidraw/drawing-2023-08-31-21.48.45.excalidraw.md","showInTree":false,"treeOrder":0,"backlinks":[],"type":"other","data":null},"_assets/pasted-image-20230924234109.png":{"createdTime":1750879262861,"modifiedTime":1750879262861,"sourceSize":56993,"sourcePath":"_assets/Pasted image 20230924234109.png","exportPath":"_assets/pasted-image-20230924234109.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"_assets/pasted-image-20230917195830.png":{"createdTime":1750879262861,"modifiedTime":1750879262861,"sourceSize":24024,"sourcePath":"_assets/Pasted image 20230917195830.png","exportPath":"_assets/pasted-image-20230917195830.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"_excalidraw/drawing-2023-09-17-20.42.18.excalidraw.md":{"createdTime":1750879262828,"modifiedTime":1750879262828,"sourceSize":16597,"sourcePath":"_excalidraw/Drawing 2023-09-17 20.42.18.excalidraw.md","exportPath":"_excalidraw/drawing-2023-09-17-20.42.18.excalidraw.md","showInTree":false,"treeOrder":0,"backlinks":[],"type":"other","data":null},"_excalidraw/drawing-2023-08-20-14.07.38.excalidraw.md":{"createdTime":1750879262817,"modifiedTime":1750879262817,"sourceSize":16547,"sourcePath":"_excalidraw/Drawing 2023-08-20 14.07.38.excalidraw.md","exportPath":"_excalidraw/drawing-2023-08-20-14.07.38.excalidraw.md","showInTree":false,"treeOrder":0,"backlinks":[],"type":"other","data":null},"_excalidraw/drawing-2023-08-20-14.18.38.excalidraw.md":{"createdTime":1750879262817,"modifiedTime":1750879262817,"sourceSize":32563,"sourcePath":"_excalidraw/Drawing 2023-08-20 14.18.38.excalidraw.md","exportPath":"_excalidraw/drawing-2023-08-20-14.18.38.excalidraw.md","showInTree":false,"treeOrder":0,"backlinks":[],"type":"other","data":null},"_excalidraw/drawing-2023-09-04-16.48.47.excalidraw.md":{"createdTime":1750879262825,"modifiedTime":1750879262825,"sourceSize":10086,"sourcePath":"_excalidraw/Drawing 2023-09-04 16.48.47.excalidraw.md","exportPath":"_excalidraw/drawing-2023-09-04-16.48.47.excalidraw.md","showInTree":false,"treeOrder":0,"backlinks":[],"type":"other","data":null},"_excalidraw/drawing-2023-09-04-16.52.05.excalidraw.md":{"createdTime":1750879262825,"modifiedTime":1750879262825,"sourceSize":17950,"sourcePath":"_excalidraw/Drawing 2023-09-04 16.52.05.excalidraw.md","exportPath":"_excalidraw/drawing-2023-09-04-16.52.05.excalidraw.md","showInTree":false,"treeOrder":0,"backlinks":[],"type":"other","data":null},"_excalidraw/drawing-2023-08-26-13.15.15.excalidraw.md":{"createdTime":1750879262821,"modifiedTime":1750879262821,"sourceSize":12794,"sourcePath":"_excalidraw/Drawing 2023-08-26 13.15.15.excalidraw.md","exportPath":"_excalidraw/drawing-2023-08-26-13.15.15.excalidraw.md","showInTree":false,"treeOrder":0,"backlinks":[],"type":"other","data":null},"_excalidraw/drawing-2023-08-26-16.50.59.excalidraw.md":{"createdTime":1750879262821,"modifiedTime":1750879262822,"sourceSize":10200,"sourcePath":"_excalidraw/Drawing 2023-08-26 16.50.59.excalidraw.md","exportPath":"_excalidraw/drawing-2023-08-26-16.50.59.excalidraw.md","showInTree":false,"treeOrder":0,"backlinks":[],"type":"other","data":null},"_excalidraw/drawing-2023-08-26-21.55.35.excalidraw.md":{"createdTime":1750879262822,"modifiedTime":1750879262822,"sourceSize":18953,"sourcePath":"_excalidraw/Drawing 2023-08-26 21.55.35.excalidraw.md","exportPath":"_excalidraw/drawing-2023-08-26-21.55.35.excalidraw.md","showInTree":false,"treeOrder":0,"backlinks":[],"type":"other","data":null},"_assets/pasted-image-20230821102028.png":{"createdTime":1750879262860,"modifiedTime":1750879262860,"sourceSize":9396,"sourcePath":"_assets/Pasted image 20230821102028.png","exportPath":"_assets/pasted-image-20230821102028.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"_assets/pasted-image-20230821102417.png":{"createdTime":1750879262860,"modifiedTime":1750879262860,"sourceSize":35486,"sourcePath":"_assets/Pasted image 20230821102417.png","exportPath":"_assets/pasted-image-20230821102417.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"_assets/example1-1.webp":{"createdTime":1750879262862,"modifiedTime":1750879262862,"sourceSize":35402,"sourcePath":"_assets/example1-1.webp","exportPath":"_assets/example1-1.webp","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"_assets/example2-1.webp":{"createdTime":1750879262862,"modifiedTime":1750879262862,"sourceSize":30964,"sourcePath":"_assets/example2-1.webp","exportPath":"_assets/example2-1.webp","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"_excalidraw/drawing-2023-08-29-11.13.50.excalidraw.md":{"createdTime":1750879262823,"modifiedTime":1750879262823,"sourceSize":6914,"sourcePath":"_excalidraw/Drawing 2023-08-29 11.13.50.excalidraw.md","exportPath":"_excalidraw/drawing-2023-08-29-11.13.50.excalidraw.md","showInTree":false,"treeOrder":0,"backlinks":[],"type":"other","data":null},"_excalidraw/drawing-2023-08-29-11.23.21.excalidraw.md":{"createdTime":1750879262823,"modifiedTime":1750879262823,"sourceSize":27017,"sourcePath":"_excalidraw/Drawing 2023-08-29 11.23.21.excalidraw.md","exportPath":"_excalidraw/drawing-2023-08-29-11.23.21.excalidraw.md","showInTree":false,"treeOrder":0,"backlinks":[],"type":"other","data":null},"_excalidraw/drawing-2023-08-21-09.39.36.excalidraw.md":{"createdTime":1750879262818,"modifiedTime":1750879262818,"sourceSize":5321,"sourcePath":"_excalidraw/Drawing 2023-08-21 09.39.36.excalidraw.md","exportPath":"_excalidraw/drawing-2023-08-21-09.39.36.excalidraw.md","showInTree":false,"treeOrder":0,"backlinks":[],"type":"other","data":null},"_assets/pasted-image-20230821095302.png":{"createdTime":1750879262858,"modifiedTime":1750879262859,"sourceSize":61908,"sourcePath":"_assets/Pasted image 20230821095302.png","exportPath":"_assets/pasted-image-20230821095302.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"_assets/pasted-image-20230821095820.png":{"createdTime":1750879262859,"modifiedTime":1750879262859,"sourceSize":23010,"sourcePath":"_assets/Pasted image 20230821095820.png","exportPath":"_assets/pasted-image-20230821095820.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"_excalidraw/drawing-2023-08-21-10.01.13.excalidraw.md":{"createdTime":1750879262818,"modifiedTime":1750879262818,"sourceSize":7102,"sourcePath":"_excalidraw/Drawing 2023-08-21 10.01.13.excalidraw.md","exportPath":"_excalidraw/drawing-2023-08-21-10.01.13.excalidraw.md","showInTree":false,"treeOrder":0,"backlinks":[],"type":"other","data":null},"_assets/pasted-image-20230821101105.png":{"createdTime":1750879262859,"modifiedTime":1750879262859,"sourceSize":15812,"sourcePath":"_assets/Pasted image 20230821101105.png","exportPath":"_assets/pasted-image-20230821101105.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"_excalidraw/drawing-2023-08-27-14.11.51.excalidraw.md":{"createdTime":1750879262822,"modifiedTime":1750879262822,"sourceSize":12141,"sourcePath":"_excalidraw/Drawing 2023-08-27 14.11.51.excalidraw.md","exportPath":"_excalidraw/drawing-2023-08-27-14.11.51.excalidraw.md","showInTree":false,"treeOrder":0,"backlinks":[],"type":"other","data":null},"_excalidraw/drawing-2023-08-29-13.29.34.excalidraw.md":{"createdTime":1750879262824,"modifiedTime":1750879262824,"sourceSize":13880,"sourcePath":"_excalidraw/Drawing 2023-08-29 13.29.34.excalidraw.md","exportPath":"_excalidraw/drawing-2023-08-29-13.29.34.excalidraw.md","showInTree":false,"treeOrder":0,"backlinks":[],"type":"other","data":null},"_excalidraw/drawing-2023-08-29-18.39.55.excalidraw.md":{"createdTime":1750879262824,"modifiedTime":1750879262824,"sourceSize":20607,"sourcePath":"_excalidraw/Drawing 2023-08-29 18.39.55.excalidraw.md","exportPath":"_excalidraw/drawing-2023-08-29-18.39.55.excalidraw.md","showInTree":false,"treeOrder":0,"backlinks":[],"type":"other","data":null},"_excalidraw/drawing-2023-08-26-01.48.03.excalidraw.md":{"createdTime":1750879262821,"modifiedTime":1750879262821,"sourceSize":34673,"sourcePath":"_excalidraw/Drawing 2023-08-26 01.48.03.excalidraw.md","exportPath":"_excalidraw/drawing-2023-08-26-01.48.03.excalidraw.md","showInTree":false,"treeOrder":0,"backlinks":[],"type":"other","data":null},"_excalidraw/drawing-2023-08-25-14.07.54.excalidraw.md":{"createdTime":1750879262820,"modifiedTime":1750879262820,"sourceSize":19300,"sourcePath":"_excalidraw/Drawing 2023-08-25 14.07.54.excalidraw.md","exportPath":"_excalidraw/drawing-2023-08-25-14.07.54.excalidraw.md","showInTree":false,"treeOrder":0,"backlinks":[],"type":"other","data":null},"site-lib/rss.xml":{"createdTime":1751871411418,"modifiedTime":1751871411418,"sourceSize":140900,"sourcePath":"","exportPath":"site-lib/rss.xml","showInTree":false,"treeOrder":0,"backlinks":[],"type":"other","data":null},"site-lib/fonts/mathjax_zero.woff":{"createdTime":1751867647547,"modifiedTime":1751867647547,"sourceSize":1368,"sourcePath":"","exportPath":"site-lib/fonts/mathjax_zero.woff","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/mathjax_main-regular.woff":{"createdTime":1751867647547,"modifiedTime":1751867647547,"sourceSize":34160,"sourcePath":"","exportPath":"site-lib/fonts/mathjax_main-regular.woff","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/mathjax_main-bold.woff":{"createdTime":1751867647548,"modifiedTime":1751867647548,"sourceSize":34464,"sourcePath":"","exportPath":"site-lib/fonts/mathjax_main-bold.woff","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/mathjax_math-italic.woff":{"createdTime":1751867647548,"modifiedTime":1751867647548,"sourceSize":19360,"sourcePath":"","exportPath":"site-lib/fonts/mathjax_math-italic.woff","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/mathjax_main-italic.woff":{"createdTime":1751867647548,"modifiedTime":1751867647548,"sourceSize":20832,"sourcePath":"","exportPath":"site-lib/fonts/mathjax_main-italic.woff","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/mathjax_math-bolditalic.woff":{"createdTime":1751867647548,"modifiedTime":1751867647548,"sourceSize":19776,"sourcePath":"","exportPath":"site-lib/fonts/mathjax_math-bolditalic.woff","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/mathjax_size1-regular.woff":{"createdTime":1751867647549,"modifiedTime":1751867647549,"sourceSize":5792,"sourcePath":"","exportPath":"site-lib/fonts/mathjax_size1-regular.woff","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/mathjax_size2-regular.woff":{"createdTime":1751867647549,"modifiedTime":1751867647549,"sourceSize":5464,"sourcePath":"","exportPath":"site-lib/fonts/mathjax_size2-regular.woff","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/mathjax_size3-regular.woff":{"createdTime":1751867647549,"modifiedTime":1751867647549,"sourceSize":3244,"sourcePath":"","exportPath":"site-lib/fonts/mathjax_size3-regular.woff","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/mathjax_size4-regular.woff":{"createdTime":1751867647550,"modifiedTime":1751867647550,"sourceSize":5148,"sourcePath":"","exportPath":"site-lib/fonts/mathjax_size4-regular.woff","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/mathjax_ams-regular.woff":{"createdTime":1751867647550,"modifiedTime":1751867647550,"sourceSize":40808,"sourcePath":"","exportPath":"site-lib/fonts/mathjax_ams-regular.woff","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/mathjax_calligraphic-regular.woff":{"createdTime":1751867647550,"modifiedTime":1751867647550,"sourceSize":9600,"sourcePath":"","exportPath":"site-lib/fonts/mathjax_calligraphic-regular.woff","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/mathjax_calligraphic-bold.woff":{"createdTime":1751867647550,"modifiedTime":1751867647550,"sourceSize":9908,"sourcePath":"","exportPath":"site-lib/fonts/mathjax_calligraphic-bold.woff","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/mathjax_fraktur-regular.woff":{"createdTime":1751867647551,"modifiedTime":1751867647551,"sourceSize":21480,"sourcePath":"","exportPath":"site-lib/fonts/mathjax_fraktur-regular.woff","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/mathjax_fraktur-bold.woff":{"createdTime":1751867647551,"modifiedTime":1751867647551,"sourceSize":22340,"sourcePath":"","exportPath":"site-lib/fonts/mathjax_fraktur-bold.woff","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/mathjax_sansserif-regular.woff":{"createdTime":1751867647551,"modifiedTime":1751867647551,"sourceSize":12660,"sourcePath":"","exportPath":"site-lib/fonts/mathjax_sansserif-regular.woff","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/mathjax_sansserif-bold.woff":{"createdTime":1751867647551,"modifiedTime":1751867647551,"sourceSize":15944,"sourcePath":"","exportPath":"site-lib/fonts/mathjax_sansserif-bold.woff","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/mathjax_sansserif-italic.woff":{"createdTime":1751867647552,"modifiedTime":1751867647552,"sourceSize":14628,"sourcePath":"","exportPath":"site-lib/fonts/mathjax_sansserif-italic.woff","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/mathjax_script-regular.woff":{"createdTime":1751867647552,"modifiedTime":1751867647552,"sourceSize":11852,"sourcePath":"","exportPath":"site-lib/fonts/mathjax_script-regular.woff","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/mathjax_typewriter-regular.woff":{"createdTime":1751867647552,"modifiedTime":1751867647552,"sourceSize":17604,"sourcePath":"","exportPath":"site-lib/fonts/mathjax_typewriter-regular.woff","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/mathjax_vector-regular.woff":{"createdTime":1751867647552,"modifiedTime":1751867647552,"sourceSize":1136,"sourcePath":"","exportPath":"site-lib/fonts/mathjax_vector-regular.woff","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/mathjax_vector-bold.woff":{"createdTime":1751867647553,"modifiedTime":1751867647553,"sourceSize":1116,"sourcePath":"","exportPath":"site-lib/fonts/mathjax_vector-bold.woff","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null}},"sourceToTarget":{"Arrays/Arrays.md":"arrays/arrays.html","Arrays/Bubble Sort.md":"arrays/bubble-sort.html","Arrays/Selection Sort.md":"arrays/selection-sort.html","Graphs/Breadth First Search (BFS).md":"graphs/breadth-first-search-(bfs).html","Graphs/Cycle Detection.md":"graphs/cycle-detection.html","Graphs/Depth First Search (DFS).md":"graphs/depth-first-search-(dfs).html","Graphs/Disjoint Set Union(DSU).md":"graphs/disjoint-set-union(dsu).html","Graphs/Graphs.md":"graphs/graphs.html","Graphs/Minimum Spanning Trees (MST).md":"graphs/minimum-spanning-trees-(mst).html","Graphs/Problems.md":"graphs/problems.html","Graphs/Representation of Graphs.md":"graphs/representation-of-graphs.html","Graphs/Shortest Path Problem.md":"graphs/shortest-path-problem.html","Graphs/Strongly Connected Components.md":"graphs/strongly-connected-components.html","Graphs/Topological Sort.md":"graphs/topological-sort.html","Heaps/Heaps.md":"heaps/heaps.html","Leetcode Contests/Weekly/359/Find the longest equal subarray.md":"leetcode-contests/weekly/359/find-the-longest-equal-subarray.html","Leetcode Contests/Weekly/359/Maximize Profit as a Salesman.md":"leetcode-contests/weekly/359/maximize-profit-as-a-salesman.html","Leetcode Contests/Leetcode Contests.md":"leetcode-contests/leetcode-contests.html","Miscellaneous/Resources/04-greedy.pdf":"miscellaneous/resources/04-greedy.html","Miscellaneous/Resources/Roadmap Resources.pdf":"miscellaneous/resources/roadmap-resources.html","Miscellaneous/Complexity Theory (P, NP, NP hard and NP complete).md":"miscellaneous/complexity-theory-(p,-np,-np-hard-and-np-complete).html","Miscellaneous/Galen's guide to being a successful competitive programmer.md":"miscellaneous/galen's-guide-to-being-a-successful-competitive-programmer.html","Miscellaneous/Mathematical Induction.md":"miscellaneous/mathematical-induction.html","Miscellaneous/Miscellaneous.md":"miscellaneous/miscellaneous.html","Miscellaneous/Policy Based Data Structures.md":"miscellaneous/policy-based-data-structures.html","Problems/GFG/Alien Dictionary.md":"problems/gfg/alien-dictionary.html","Problems/GFG/Flood fill algorithm.md":"problems/gfg/flood-fill-algorithm.html","Problems/GFG/GFG.md":"problems/gfg/gfg.html","Problems/Leetcode/440 Kth lexicographically smallest number.md":"problems/leetcode/440-kth-lexicographically-smallest-number.html","Problems/Leetcode/Divisor Game.md":"problems/leetcode/divisor-game.html","Problems/Leetcode/Is Graph Bipartite.md":"problems/leetcode/is-graph-bipartite.html","Problems/Leetcode/Leetcode.md":"problems/leetcode/leetcode.html","Problems/Leetcode/Miscellaneous.md":"problems/leetcode/miscellaneous.html","Problems/Leetcode/Nth Digit.md":"problems/leetcode/nth-digit.html","Problems/Leetcode/Path Sum 3.md":"problems/leetcode/path-sum-3.html","Problems/Problems.md":"problems/problems.html","Queues/Queues.md":"queues/queues.html","Stacks/Stacks.md":"stacks/stacks.html","Strings/KMP algorithm.md":"strings/kmp-algorithm.html","Strings/Strings.md":"strings/strings.html","Trees/AVL Trees.md":"trees/avl-trees.html","Trees/Range Queries.md":"trees/range-queries.html","Trees/Red and Black Trees.md":"trees/red-and-black-trees.html","Trees/Trees.md":"trees/trees.html","Tries/Problems.md":"tries/problems.html","Tries/Tries.md":"tries/tries.html","index.md":"index.html","":"site-lib/rss.xml","_excalidraw/Drawing 2023-09-13 15.28.51.excalidraw.md":"_excalidraw/drawing-2023-09-13-15.28.51.excalidraw.md","_excalidraw/Drawing 2023-10-01 22.04.16.excalidraw.md":"_excalidraw/drawing-2023-10-01-22.04.16.excalidraw.md","_excalidraw/Drawing 2023-10-01 22.21.21.excalidraw.md":"_excalidraw/drawing-2023-10-01-22.21.21.excalidraw.md","_excalidraw/Drawing 2023-10-01 22.28.13.excalidraw.md":"_excalidraw/drawing-2023-10-01-22.28.13.excalidraw.md","_excalidraw/Drawing 2023-10-01 23.12.08.excalidraw.md":"_excalidraw/drawing-2023-10-01-23.12.08.excalidraw.md","_excalidraw/Drawing 2023-08-31 21.48.45.excalidraw.md":"_excalidraw/drawing-2023-08-31-21.48.45.excalidraw.md","_assets/Pasted image 20230924234109.png":"_assets/pasted-image-20230924234109.png","_assets/Pasted image 20230917195830.png":"_assets/pasted-image-20230917195830.png","_excalidraw/Drawing 2023-09-17 20.42.18.excalidraw.md":"_excalidraw/drawing-2023-09-17-20.42.18.excalidraw.md","_excalidraw/Drawing 2023-08-20 14.07.38.excalidraw.md":"_excalidraw/drawing-2023-08-20-14.07.38.excalidraw.md","_excalidraw/Drawing 2023-08-20 14.18.38.excalidraw.md":"_excalidraw/drawing-2023-08-20-14.18.38.excalidraw.md","_excalidraw/Drawing 2023-09-04 16.48.47.excalidraw.md":"_excalidraw/drawing-2023-09-04-16.48.47.excalidraw.md","_excalidraw/Drawing 2023-09-04 16.52.05.excalidraw.md":"_excalidraw/drawing-2023-09-04-16.52.05.excalidraw.md","_excalidraw/Drawing 2023-08-26 13.15.15.excalidraw.md":"_excalidraw/drawing-2023-08-26-13.15.15.excalidraw.md","_excalidraw/Drawing 2023-08-26 16.50.59.excalidraw.md":"_excalidraw/drawing-2023-08-26-16.50.59.excalidraw.md","_excalidraw/Drawing 2023-08-26 21.55.35.excalidraw.md":"_excalidraw/drawing-2023-08-26-21.55.35.excalidraw.md","_assets/Pasted image 20230821102028.png":"_assets/pasted-image-20230821102028.png","_assets/Pasted image 20230821102417.png":"_assets/pasted-image-20230821102417.png","_assets/example1-1.webp":"_assets/example1-1.webp","_assets/example2-1.webp":"_assets/example2-1.webp","_excalidraw/Drawing 2023-08-29 11.13.50.excalidraw.md":"_excalidraw/drawing-2023-08-29-11.13.50.excalidraw.md","_excalidraw/Drawing 2023-08-29 11.23.21.excalidraw.md":"_excalidraw/drawing-2023-08-29-11.23.21.excalidraw.md","_excalidraw/Drawing 2023-08-21 09.39.36.excalidraw.md":"_excalidraw/drawing-2023-08-21-09.39.36.excalidraw.md","_assets/Pasted image 20230821095302.png":"_assets/pasted-image-20230821095302.png","_assets/Pasted image 20230821095820.png":"_assets/pasted-image-20230821095820.png","_excalidraw/Drawing 2023-08-21 10.01.13.excalidraw.md":"_excalidraw/drawing-2023-08-21-10.01.13.excalidraw.md","_assets/Pasted image 20230821101105.png":"_assets/pasted-image-20230821101105.png","_excalidraw/Drawing 2023-08-27 14.11.51.excalidraw.md":"_excalidraw/drawing-2023-08-27-14.11.51.excalidraw.md","_excalidraw/Drawing 2023-08-29 13.29.34.excalidraw.md":"_excalidraw/drawing-2023-08-29-13.29.34.excalidraw.md","_excalidraw/Drawing 2023-08-29 18.39.55.excalidraw.md":"_excalidraw/drawing-2023-08-29-18.39.55.excalidraw.md","_excalidraw/Drawing 2023-08-26 01.48.03.excalidraw.md":"_excalidraw/drawing-2023-08-26-01.48.03.excalidraw.md","_excalidraw/Drawing 2023-08-25 14.07.54.excalidraw.md":"_excalidraw/drawing-2023-08-25-14.07.54.excalidraw.md"},"featureOptions":{"backlinks":{"featureId":"backlinks","enabled":true,"unavailable":false,"alwaysEnabled":false,"displayTitle":"Backlinks","featurePlacement":{"selector":".footer","type":"start","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""}},"tags":{"featureId":"tags","enabled":true,"unavailable":false,"alwaysEnabled":false,"displayTitle":"","featurePlacement":{"selector":".header .data-bar","type":"end","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"showInlineTags":true,"showFrontmatterTags":true,"info_showInlineTags":{"show":true,"name":"","description":"Show tags defined inside the document at the top of the page.","placeholder":""},"info_showFrontmatterTags":{"show":true,"name":"","description":"Show tags defined in the frontmatter of the document at the top of the page.","placeholder":""}},"alias":{"featureId":"aliases","enabled":true,"unavailable":false,"alwaysEnabled":false,"displayTitle":"","featurePlacement":{"selector":".header .data-bar","type":"start","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""}},"properties":{"featureId":"properties","enabled":true,"unavailable":false,"alwaysEnabled":false,"displayTitle":"Properties","featurePlacement":{"selector":".header","type":"start","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"info_hideProperties":{"show":true,"name":"","description":"A list of properties to hide from the properties view","placeholder":""}},"fileNavigation":{"featureId":"file-navigation","enabled":true,"unavailable":false,"alwaysEnabled":false,"displayTitle":"","featurePlacement":{"selector":"#left-sidebar-content","type":"end","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"info_includePath":{"show":false,"name":"","description":"","placeholder":""},"showCustomIcons":false,"showDefaultFolderIcons":false,"showDefaultFileIcons":false,"defaultFolderIcon":"lucide//folder","defaultFileIcon":"lucide//file","defaultMediaIcon":"lucide//file-image","exposeStartingPath":true,"info_showCustomIcons":{"show":true,"name":"","description":"Show custom icons for files and folders","placeholder":""},"info_showDefaultFolderIcons":{"show":true,"name":"","description":"Show a default icon of a folder for every folder in the tree","placeholder":""},"info_showDefaultFileIcons":{"show":true,"name":"","description":"Show a default icon of a file for every file in the tree","placeholder":""},"info_defaultFolderIcon":{"show":true,"name":"","description":"The icon to use for folders. Prefix with 'lucide//' to use a Lucide icon","placeholder":""},"info_defaultFileIcon":{"show":true,"name":"","description":"The icon to use for files. Prefix with 'lucide//' to use a Lucide icon","placeholder":""},"info_defaultMediaIcon":{"show":true,"name":"","description":"The icon to use for media files. Prefix with 'lucide//' to use a Lucide icon","placeholder":""},"info_exposeStartingPath":{"show":true,"name":"","description":"Whether or not to show the current file in the file tree when the page is first loaded","placeholder":""},"includePath":"site-lib/html/file-tree.html"},"search":{"featureId":"search","enabled":true,"unavailable":false,"alwaysEnabled":false,"displayTitle":"Search...","featurePlacement":{"selector":"#left-sidebar .topbar-content","type":"start","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""}},"outline":{"featureId":"outline","enabled":true,"unavailable":false,"alwaysEnabled":false,"displayTitle":"Outline","featurePlacement":{"selector":"#right-sidebar-content","type":"end","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"startCollapsed":false,"minCollapseDepth":0,"info_startCollapsed":{"show":true,"name":"","description":"Should the outline start collapsed?","placeholder":""},"info_minCollapseDepth":{"show":true,"name":"","description":"Only allow outline items to be collapsed if they are at least this many levels deep in the tree.","placeholder":"","dropdownOptions":{"1":1,"2":2,"No Collapse":100}}},"themeToggle":{"featureId":"theme-toggle","enabled":true,"unavailable":false,"alwaysEnabled":false,"displayTitle":"","featurePlacement":{"selector":"#right-sidebar .topbar-content","type":"start","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""}},"graphView":{"featureId":"graph-view","enabled":true,"unavailable":false,"alwaysEnabled":false,"displayTitle":"Graph View","featurePlacement":{"selector":"#right-sidebar-content","type":"start","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"showOrphanNodes":true,"showAttachments":false,"allowGlobalGraph":true,"allowExpand":true,"attractionForce":1,"linkLength":15,"repulsionForce":80,"centralForce":2,"edgePruning":100,"minNodeRadius":3,"maxNodeRadius":7,"info_showOrphanNodes":{"show":true,"name":"","description":"Show nodes that are not connected to any other nodes.","placeholder":""},"info_showAttachments":{"show":true,"name":"","description":"Show attachments like images and PDFs as nodes in the graph.","placeholder":""},"info_allowGlobalGraph":{"show":true,"name":"","description":"Allow the user to view the global graph of all nodes.","placeholder":""},"info_allowExpand":{"show":true,"name":"","description":"Allow the user to pop-out the graph view to take up the whole screen","placeholder":""},"info_attractionForce":{"show":true,"name":"","description":"How much should linked nodes attract each other? This will make the graph appear more clustered.","placeholder":""},"info_linkLength":{"show":true,"name":"","description":"How long should the links between nodes be? The shorter the links the more connected nodes will cluster together.","placeholder":""},"info_repulsionForce":{"show":true,"name":"","description":"How much should nodes repel each other? This will make disconnected parts more spread out.","placeholder":""},"info_centralForce":{"show":true,"name":"","description":"How much should nodes be attracted to the center? This will make the graph appear more dense and circular.","placeholder":""},"info_edgePruning":{"show":true,"name":"","description":"Edges with a length above this threshold will not be rendered, however they will still contribute to the simulation. This can help large tangled graphs look more organised. Hovering over a node will still display these links.","placeholder":""},"info_minNodeRadius":{"show":true,"name":"","description":"How small should the smallest nodes be? The smaller a node is the less it will attract other nodes.","placeholder":""},"info_maxNodeRadius":{"show":true,"name":"","description":"How large should the largest nodes be? Nodes are sized by how many links they have. The larger a node is the more it will attract other nodes. This can be used to create a good grouping around the most important nodes.","placeholder":""}},"sidebar":{"featureId":"sidebar","enabled":true,"unavailable":false,"alwaysEnabled":false,"allowResizing":true,"allowCollapsing":true,"rightDefaultWidth":"20em","leftDefaultWidth":"20em","info_allowResizing":{"show":true,"name":"","description":"Whether or not to allow the sidebars to be resized","placeholder":""},"info_allowCollapsing":{"show":true,"name":"","description":"Whether or not to allow the sidebars to be collapsed","placeholder":""},"info_rightDefaultWidth":{"show":true,"name":"","description":"The default width of the right sidebar","placeholder":""},"info_leftDefaultWidth":{"show":true,"name":"","description":"The default width of the left sidebar","placeholder":""}},"customHead":{"featureId":"custom-head","enabled":true,"unavailable":false,"alwaysEnabled":false,"displayTitle":"","featurePlacement":{"selector":"head","type":"end","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"info_includePath":{"show":false,"name":"","description":"","placeholder":""},"sourcePath":"..\\common_obsidian_scripts\\WebpageHtmlExportFixes.html","info_sourcePath":{"show":true,"name":"","description":"The local path to the source .html file which will be included.","placeholder":"","fileInputOptions":{"makeRelativeToVault":true,"browseButton":true}},"includePath":"site-lib/html/custom-head.html"},"document":{"featureId":"obsidian-document","enabled":true,"unavailable":false,"alwaysEnabled":true,"allowFoldingLists":true,"allowFoldingHeadings":true,"documentWidth":"40em","info_allowFoldingLists":{"show":true,"name":"","description":"Whether or not to allow lists to be folded","placeholder":""},"info_allowFoldingHeadings":{"show":true,"name":"","description":"Whether or not to allow headings to be folded","placeholder":""},"info_documentWidth":{"show":true,"name":"","description":"The width of the document","placeholder":""}},"rss":{"featureId":"obsidian-document","enabled":true,"unavailable":false,"alwaysEnabled":false,"siteUrl":"","siteName":"Data Structures & Algorithms","authorName":"","info_siteUrl":{"show":true,"name":"","description":"The url that this site will be hosted at","placeholder":"https://example.com/mysite"},"info_siteName":{"show":true,"name":"","description":"The name of the vault / exported site","placeholder":""},"info_authorName":{"show":true,"name":"","description":"The name of the author of the site","placeholder":""}}},"modifiedTime":1751871410772,"siteName":"Data Structures & Algorithms","vaultName":"Data Structures & Algorithms","exportRoot":"","baseURL":"","pluginVersion":"1.9.0-3b","themeName":"","bodyClasses":"publish css-settings-manager mod-windows is-frameless is-hidden-frameless show-inline-title show-ribbon highlightr-realistic color-scheme-options-simplicity-topaz background-settings-workplace-background-image background-settings-workplace-waves2-light background-settings-workplace-waves2 background-image-settings-markdown-page-sea-and-sky background-image-settings-markdown-page-random-default notebook-liked-markdown-page-dotted-notebook-1 background-image-settings-command-palette-switch panel-page-bg-theme-light-random panel-page-bg-theme-dark-random layout-style-options-default bt-default-unordered-list list-no-border folder-style-change-options-colorful-default folder-colorful-one table-width-100 default-loading-page loading-text-typing-style rainbow-tag default-tab default-canvas-background style-options-for-admonition-plugin style-options-for-buttons-plugin dataview-list-style-pacman quiet-outline-optimize code-theme-dracula code-line-number is-focused","hasFavicon":false}